from io import StringIO

import numpy as np
import pandas as pd

from opti.constraint import LinearEquality, LinearInequality
from opti.objective import CloseToTarget, Maximize, Minimize
from opti.parameter import Categorical, Continuous, Discrete
from opti.problem import Problem


def get_cake_data():
    fin = StringIO(
        """name;wheat_flour;spelt_flour;sugar;chocolate;nuts;carrot;calories;taste;browning
1;0.21;0;0.26;0.27;0.14;0.12;436.7738521;3.497981406;0.758500085
2;0.29;0;0.29;0.26;0;0.16;395.0992445;0.776140092;0.749857272
3;0;0.37;0.18;0.26;0.19;0;465.1029138;4.055489634;1.352
4;0.2;0;0.15;0.32;0.14;0.19;339.3823768;3.197262889;0.826815588
5;0.13;0.2;0.26;0.32;0;0.09;398.3182445;0.904554414;1.138354875
6;0;0.37;0.34;0.22;0.07;0;459.9732096;2.09344882;1.312
7;0.29;0;0.32;0.28;0;0.11;354.3485434;0.912223642;0.802974807
8;0.34;0;0.15;0.34;0.17;0;484.6434736;3.864211767;0.815400523
9;0.13;0.14;0.34;0.28;0.11;0;450.8474392;3.00055058;1.00846061
10;0.1;0.23;0.19;0.2;0.09;0.19;381.2843246;1.951460934;1.069707914
11;0.11;0.22;0.31;0.22;0;0.14;346.3180133;0.800373036;1.074004817
12;0.25;0.12;0.3;0.2;0.13;0;459.2451023;3.181324487;0.888057674
13;0.16;0.19;0.19;0.3;0.16;0;477.7458525;3.658017321;1.112738931
14;0.12;0.16;0.34;0.18;0.2;0;462.862761;4.458175209;0.942103402
15;0;0.33;0.34;0.24;0;0.09;377.3769182;0.902841949;1.268
16;0.37;0;0.35;0.17;0.11;0;418.6744289;2.88084879;0.683555134
17;0.25;0;0.16;0.21;0.19;0.19;366.4131553;3.682613224;0.700691489
18;0.15;0.24;0.18;0.23;0.2;0;431.3347645;4.188142987;1.121733587
19;0.3;0;0.22;0.31;0.07;0.1;425.1070725;2.165852024;0.79802366
20;0.16;0.22;0.29;0.16;0.17;0;438.8011137;3.858477387;1.01660159
21;0.27;0;0.34;0.31;0.08;0;448.5728946;2.422814244;0.802378002
22;0.17;0.21;0.21;0.25;0.16;0;436.961298;3.561703019;1.08299139
23;0.24;0.12;0.26;0.32;0.06;0;451.0601178;2.041616095;1.018091383
24;0.3;0;0.35;0.18;0.17;0;436.177002;4.006750528;0.662947313
25;0;0.36;0.29;0.27;0.08;0;443.3685259;2.412987278;1.346
26;0.12;0.21;0.31;0.33;0;0.03;422.0898274;0.920354014;1.170302789
27;0;0.31;0.22;0.3;0;0.17;313.7802098;0.786912343;1.296
28;0.1;0.23;0.35;0;0.15;0.17;327.803983;3.109105815;0.868286261
29;0.14;0.23;0.32;0.2;0.11;0;447.3939985;2.836332285;1.079054559
30;0;0.3;0.25;0.19;0.07;0.19;326.1397988;1.846426954;1.17
31;0.31;0;0.32;0.17;0.2;0;391.9512959;4.549275105;0.669505348
32;0.22;0.15;0.27;0.25;0.11;0;436.967869;2.899532144;0.996218701
33;0.25;0.13;0.28;0.29;0;0.05;426.4898204;0.84847177;0.996880489
34;0.23;0;0.32;0.26;0;0.19;401.519544;0.768496233;0.766645949
35;0.19;0.15;0.29;0.32;0;0.05;404.2457425;0.987952392;1.056297893
36;0.27;0;0.27;0.26;0.2;0;483.2164347;4.544728757;0.767616964
37;0;0.3;0.24;0.28;0.18;0;492.0994642;4.242687882;1.26
38;0.35;0;0.19;0.17;0.16;0.13;406.134562;3.219227307;0.684934249
39;0.17;0.21;0.3;0.25;0.07;0;406.67483;2.135263501;1.084170089
40;0.11;0.17;0.33;0.22;0;0.17;363.4549065;0.894561644;0.996720585
41;0.38;0;0.28;0.17;0.17;0;387.5909487;3.756212357;0.677754259
42;0;0.32;0.22;0.28;0.18;0;440.1281742;4.117540665;1.292
43;0;0.39;0.16;0.29;0.16;0;436.9216758;3.564469337;1.414
44;0.37;0;0.23;0.25;0;0.15;384.2922094;0.631977062;0.768333831
45;0;0.32;0.31;0.31;0.06;0;405.7843704;2.111478941;1.322
46;0.23;0.15;0.31;0.17;0;0.14;364.8985875;0.64387597;0.9106849
47;0;0.4;0.2;0.19;0.11;0.1;358.526137;2.333813938;1.33
48;0.21;0.12;0.19;0.25;0.11;0.12;408.5721848;2.489870735;0.943911986
49;0;0.38;0.27;0.17;0;0.18;336.2541717;0.524039398;1.278
50;0;0.3;0.27;0.23;0.2;0;400.7478785;4.538768738;1.21"""
    )
    return pd.read_csv(fin, delimiter=";", index_col=0).round(3)


class Cake(Problem):
    def __init__(self):
        super().__init__(
            name="Cake",
            inputs=[
                Continuous(name="wheat_flour", domain=[0, 1]),
                Continuous(name="spelt_flour", domain=[0, 1]),
                Continuous(name="sugar", domain=[0, 1]),
                Continuous(name="chocolate", domain=[0, 1]),
                Continuous(name="nuts", domain=[0, 1]),
                Continuous(name="carrot", domain=[0, 1]),
            ],
            outputs=[
                Continuous(name="calories", domain=[300, 600]),
                Continuous(name="taste", domain=[0, 5]),
                Continuous(name="browning", domain=[0, 2]),
            ],
            objectives=[
                Minimize("calories"),
                Maximize("taste"),
                CloseToTarget("browning", target=1.4),
            ],
            constraints=[
                LinearEquality(
                    names=[
                        "wheat_flour",
                        "spelt_flour",
                        "sugar",
                        "chocolate",
                        "nuts",
                        "carrot",
                    ],
                    lhs=np.ones(6),
                    rhs=1,
                )
            ],
            data=get_cake_data(),
        )


def get_bread_data():
    fin = StringIO(
        """name,flour,water,salt,yeast,yeast_type,kneading,kneading_time,resting_time,baking_time,baking_temperature,crust,elasticity,taste,appearance
0,813.05,574.89,19.11,74.82,A,3,73.33,84.62,39.1,189.71,8.1,6000,4,2
1,934.33,589.91,13.62,83.27,B,3,109.64,38.2,107.27,99.66,6.7,7100,4,4
2,890.25,246.57,30.27,57.0,C,4,76.55,111.94,92.29,170.44,5.2,3200,2,3
3,879.71,498.66,40.72,43.84,A,2,11.8,57.57,92.63,203.38,4.3,2900,1,3
4,673.99,293.44,46.62,16.51,B,5,98.37,26.95,111.01,164.08,5.3,5300,3,2
5,734.88,410.78,45.01,18.21,C,4,70.26,68.61,36.64,242.14,1.8,3800,4,1
6,737.67,382.67,15.99,55.27,A,2,82.78,93.43,2.35,185.9,0.9,6200,2,5
7,722.28,361.54,35.16,77.08,B,1,14.03,81.11,107.32,113.75,4.2,2100,1,4
8,772.35,420.44,45.49,54.69,C,2,2.14,67.33,95.91,181.58,4.6,1800,5,3
9,945.65,556.18,26.89,85.67,C,3,97.67,44.63,62.21,227.68,5.7,3600,2,2"""
    )
    return pd.read_csv(fin, index_col=0)


class Bread(Problem):
    """Dummy problem with mixed inputs and outputs."""

    def __init__(self):
        super().__init__(
            name="Bread",
            inputs=[
                Continuous("flour", [600, 1000]),
                Continuous("water", [200, 600]),
                Continuous("salt", [10, 50]),
                Continuous("yeast", [5, 100]),
                Categorical("yeast_type", ["A", "B", "C"]),
                Discrete("kneading", [1, 2, 3, 4]),
                Continuous("kneading_time", [0, 120]),
                Continuous("resting_time", [0, 120]),
                Continuous("baking_time", [0, 120]),
                Continuous("baking_temperature", [90, 250]),
            ],
            outputs=[
                Continuous("crust", [0, 10]),
                Continuous("elasticity", [0, 10000]),
                Discrete("taste", [1, 2, 3, 4, 5]),
                Discrete("appearance", [1, 2, 3, 4, 5]),
            ],
            objectives=[
                Maximize("crust"),
                CloseToTarget("elasticity", target=1000, exponent=2),
                Maximize("taste"),
                Maximize("appearance"),
            ],
            constraints=[
                LinearEquality(
                    names=["flour", "water", "salt", "yeast"], lhs=[1, 1, 1, 1], rhs=1
                ),
                LinearInequality(
                    names=["kneading_time", "resting_time", "baking_time"],
                    lhs=[1, 1, 1],
                    rhs=240,
                ),
            ],
            data=get_bread_data(),
        )
