{"version":3,"file":"946ed447.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAuCA;AACA;;;;;AA0BA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;;AAOA;AAEA;;AAEA;AAGA;;AAEA;;AAGA;;;;;;AApDA;;;;;;;;;;;;;;AAAA;;ACxBA;;;;;AAUA;;AAEA;;;AAGA;;AAIA;;;AA7BA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;ACsFA;AAKA;AACA;AACA;AACA;AACA;;;;AAIA;AAKA;AACA;AACA;;;;AAIA;AAKA;AACA;AACA;AAKA;AACA;;;AAGA;AAKA;AACA;;;;AAIA;;AAEA;;;;;;AAMA;AAKA;AACA;AACA;;;AAGA;;;AAKA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;;;AAGA;;AAMA;;AAEA;AACA;;;;AAzJA","sources":["webpack://home-assistant-frontend/./src/components/ha-icon-picker.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-theme-select-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-sensor-card-editor.ts"],"sourcesContent":["import { mdiCheck, mdiMenuDown, mdiMenuUp } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@vaadin/vaadin-combo-box/theme/material/vaadin-combo-box-light\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer, comboBoxRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport \"./ha-icon\";\nimport \"./ha-icon-button\";\n\nlet mdiIconList: string[] = [];\n\n// eslint-disable-next-line lit/prefer-static-styles\nconst rowRenderer: ComboBoxLitRenderer<string> = (item) => html`<style>\n    paper-icon-item {\n      padding: 0;\n      margin: -8px;\n    }\n    #content {\n      display: flex;\n      align-items: center;\n    }\n    ha-svg-icon {\n      padding-left: 2px;\n      color: var(--secondary-text-color);\n    }\n    :host(:not([selected])) ha-svg-icon {\n      display: none;\n    }\n    :host([selected]) paper-icon-item {\n      margin-left: 0;\n    }\n  </style>\n\n  <ha-svg-icon .path=${mdiCheck}></ha-svg-icon>\n  <paper-icon-item>\n    <ha-icon .icon=${item} slot=\"item-icon\"></ha-icon>\n    <paper-item-body>${item}</paper-item-body>\n  </paper-icon-item>`;\n\n@customElement(\"ha-icon-picker\")\nexport class HaIconPicker extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property() public fallbackPath?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @state() private _opened = false;\n\n  @query(\"vaadin-combo-box-light\", true) private comboBox!: HTMLElement;\n\n  protected render(): TemplateResult {\n    return html`\n      <vaadin-combo-box-light\n        item-value-path=\"icon\"\n        item-label-path=\"icon\"\n        .value=${this._value}\n        allow-custom-value\n        .filteredItems=${mdiIconList}\n        ${comboBoxRenderer(rowRenderer)}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n        @filter-changed=${this._filterChanged}\n      >\n        <paper-input\n          .label=${this.label}\n          .placeholder=${this.placeholder}\n          .disabled=${this.disabled}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n        >\n          ${this._value || this.placeholder\n            ? html`\n                <ha-icon .icon=${this._value || this.placeholder} slot=\"prefix\">\n                </ha-icon>\n              `\n            : this.fallbackPath\n            ? html`<ha-svg-icon\n                .path=${this.fallbackPath}\n                slot=\"prefix\"\n              ></ha-svg-icon>`\n            : \"\"}\n          <ha-icon-button\n            .path=${this._opened ? mdiMenuUp : mdiMenuDown}\n            slot=\"suffix\"\n            class=\"toggle-button\"\n          ></ha-icon-button>\n        </paper-input>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private async _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n    if (this._opened && !mdiIconList.length) {\n      const iconList = await import(\"../../build/mdi/iconList.json\");\n      mdiIconList = iconList.default.map((icon) => `mdi:${icon}`);\n      (this.comboBox as any).filteredItems = mdiIconList;\n    }\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    this._setValue(ev.detail.value);\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const filterString = ev.detail.value.toLowerCase();\n    const characterCount = filterString.length;\n    if (characterCount >= 2) {\n      const filteredItems = mdiIconList.filter((icon) =>\n        icon.includes(filterString)\n      );\n      if (filteredItems.length > 0) {\n        (this.comboBox as any).filteredItems = filteredItems;\n      } else {\n        (this.comboBox as any).filteredItems = [filterString];\n      }\n    } else {\n      (this.comboBox as any).filteredItems = mdiIconList;\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  static get styles() {\n    return css`\n      ha-icon,\n      ha-svg-icon {\n        position: relative;\n        bottom: 2px;\n      }\n      *[slot=\"prefix\"] {\n        margin-right: 8px;\n      }\n      paper-input > ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-picker\": HaIconPicker;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"hui-theme-select-editor\")\nexport class HuiThemeSelectEditor extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  protected render(): TemplateResult {\n    return html`\n      <paper-dropdown-menu\n        .label=${this.label ||\n        `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`}\n        dynamic-align\n      >\n        <paper-listbox\n          slot=\"dropdown-content\"\n          .selected=${this.value}\n          attr-for-selected=\"theme\"\n          @iron-select=${this._changed}\n        >\n          <paper-item theme=\"remove\"\n            >${this.hass!.localize(\n              \"ui.panel.lovelace.editor.card.generic.no_theme\"\n            )}</paper-item\n          >\n          ${Object.keys(this.hass!.themes.themes)\n            .sort()\n            .map(\n              (theme) =>\n                html` <paper-item theme=${theme}>${theme}</paper-item> `\n            )}\n        </paper-listbox>\n      </paper-dropdown-menu>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      paper-dropdown-menu {\n        width: 100%;\n      }\n      paper-item {\n        cursor: pointer;\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    if (!this.hass || ev.target.selected === \"\") {\n      return;\n    }\n    this.value = ev.target.selected === \"remove\" ? \"\" : ev.target.selected;\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-theme-select-editor\": HuiThemeSelectEditor;\n  }\n}\n","import \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { assert, assign, number, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\nimport { domainIcon } from \"../../../../common/entity/domain_icon\";\nimport \"../../../../components/entity/ha-entity-picker\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-switch\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { SensorCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-theme-select-editor\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { EditorTarget, EntitiesEditorEvent } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(string()),\n    name: optional(string()),\n    icon: optional(string()),\n    graph: optional(string()),\n    unit: optional(string()),\n    detail: optional(number()),\n    theme: optional(string()),\n    hours_to_show: optional(number()),\n  })\n);\n\nconst includeDomains = [\"counter\", \"input_number\", \"number\", \"sensor\"];\n\n@customElement(\"hui-sensor-card-editor\")\nexport class HuiSensorCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: SensorCardConfig;\n\n  public setConfig(config: SensorCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  get _entity(): string {\n    return this._config!.entity || \"\";\n  }\n\n  get _name(): string {\n    return this._config!.name || \"\";\n  }\n\n  get _icon(): string {\n    return this._config!.icon || \"\";\n  }\n\n  get _graph(): string {\n    return this._config!.graph || \"none\";\n  }\n\n  get _unit(): string {\n    return this._config!.unit || \"\";\n  }\n\n  get _detail(): number {\n    return this._config!.detail ?? 1;\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"\";\n  }\n\n  get _hours_to_show(): number | string {\n    return this._config!.hours_to_show || \"24\";\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const graphs = [\"line\", \"none\"];\n\n    const entityState = this.hass.states[this._entity];\n\n    return html`\n      <div class=\"card-config\">\n        <ha-entity-picker\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.entity\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.required\"\n          )})\"\n          .hass=${this.hass}\n          .value=${this._entity}\n          .configValue=${\"entity\"}\n          .includeDomains=${includeDomains}\n          @change=${this._valueChanged}\n          allow-custom-entity\n        ></ha-entity-picker>\n        <paper-input\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.name\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n        ></paper-input>\n        <div class=\"side-by-side\">\n          <ha-icon-picker\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.icon\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._icon}\n            .placeholder=${this._icon || entityState?.attributes.icon}\n            .fallbackPath=${!this._icon &&\n            !entityState?.attributes.icon &&\n            entityState\n              ? domainIcon(computeDomain(entityState.entity_id), entityState)\n              : undefined}\n            .configValue=${\"icon\"}\n            @value-changed=${this._valueChanged}\n          ></ha-icon-picker>\n          <paper-dropdown-menu\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.sensor.graph_type\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .configValue=${\"graph\"}\n            @value-changed=${this._valueChanged}\n          >\n            <paper-listbox\n              slot=\"dropdown-content\"\n              .selected=${graphs.indexOf(this._graph)}\n            >\n              ${graphs.map((graph) => html`<paper-item>${graph}</paper-item>`)}\n            </paper-listbox>\n          </paper-dropdown-menu>\n        </div>\n        <div class=\"side-by-side\">\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.unit\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._unit}\n            .configValue=${\"unit\"}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n          <ha-formfield\n            label=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.sensor.show_more_detail\"\n            )}\n          >\n            <ha-switch\n              .checked=${this._detail === 2}\n              .configValue=${\"detail\"}\n              @change=${this._change}\n            ></ha-switch>\n          </ha-formfield>\n        </div>\n        <div class=\"side-by-side\">\n          <hui-theme-select-editor\n            .hass=${this.hass}\n            .value=${this._theme}\n            .configValue=${\"theme\"}\n            @value-changed=${this._valueChanged}\n          ></hui-theme-select-editor>\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.hours_to_show\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            type=\"number\"\n            .value=${this._hours_to_show}\n            min=\"1\"\n            .configValue=${\"hours_to_show\"}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n        </div>\n      </div>\n    `;\n  }\n\n  private _change(ev: Event) {\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const value = (ev.target! as EditorTarget).checked ? 2 : 1;\n\n    if (this._detail === value) {\n      return;\n    }\n\n    this._config = {\n      ...this._config,\n      detail: value,\n    };\n\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n\n    if (this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n    if (target.configValue) {\n      if (\n        target.value === \"\" ||\n        (target.type === \"number\" && isNaN(Number(target.value)))\n      ) {\n        this._config = { ...this._config };\n        delete this._config[target.configValue!];\n      } else {\n        let value: any = target.value;\n        if (target.type === \"number\") {\n          value = Number(value);\n        }\n        this._config = { ...this._config, [target.configValue!]: value };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResultGroup {\n    return configElementStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-sensor-card-editor\": HuiSensorCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}