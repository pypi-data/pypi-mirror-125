# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RouterStatic6Args', 'RouterStatic6']

@pulumi.input_type
class RouterStatic6Args:
    def __init__(__self__, *,
                 device: pulumi.Input[str],
                 bfd: Optional[pulumi.Input[str]] = None,
                 blackhole: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 devindex: Optional[pulumi.Input[int]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 link_monitor_exempt: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 sdwan: Optional[pulumi.Input[str]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 virtual_wan_link: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RouterStatic6 resource.
        :param pulumi.Input[str] device: Gateway out interface or tunnel.
        :param pulumi.Input[str] bfd: Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] blackhole: Enable/disable black hole. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comment: Optional comments.
        :param pulumi.Input[int] devindex: Device index (0 - 4294967295).
        :param pulumi.Input[int] distance: Administrative distance (1 - 255).
        :param pulumi.Input[str] dst: Destination IPv6 prefix.
        :param pulumi.Input[str] gateway: IPv6 address of the gateway.
        :param pulumi.Input[str] link_monitor_exempt: Enable/disable withdrawal of this static route when link monitor or health check is down. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Administrative priority (0 - 4294967295).
        :param pulumi.Input[str] sdwan: Enable/disable egress through the SD-WAN. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] seq_num: Sequence number.
        :param pulumi.Input[str] status: Enable/disable this static route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] virtual_wan_link: Enable/disable egress through the virtual-wan-link. Valid values: `enable`, `disable`.
        """
        pulumi.set(__self__, "device", device)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if blackhole is not None:
            pulumi.set(__self__, "blackhole", blackhole)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if devindex is not None:
            pulumi.set(__self__, "devindex", devindex)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if link_monitor_exempt is not None:
            pulumi.set(__self__, "link_monitor_exempt", link_monitor_exempt)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if sdwan is not None:
            pulumi.set(__self__, "sdwan", sdwan)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if virtual_wan_link is not None:
            pulumi.set(__self__, "virtual_wan_link", virtual_wan_link)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Input[str]:
        """
        Gateway out interface or tunnel.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: pulumi.Input[str]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter
    def blackhole(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable black hole. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "blackhole")

    @blackhole.setter
    def blackhole(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blackhole", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Optional comments.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def devindex(self) -> Optional[pulumi.Input[int]]:
        """
        Device index (0 - 4294967295).
        """
        return pulumi.get(self, "devindex")

    @devindex.setter
    def devindex(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "devindex", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Administrative distance (1 - 255).
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IPv6 prefix.
        """
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the gateway.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="linkMonitorExempt")
    def link_monitor_exempt(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable withdrawal of this static route when link monitor or health check is down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "link_monitor_exempt")

    @link_monitor_exempt.setter
    def link_monitor_exempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_monitor_exempt", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Administrative priority (0 - 4294967295).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def sdwan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable egress through the SD-WAN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sdwan")

    @sdwan.setter
    def sdwan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdwan", value)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this static route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="virtualWanLink")
    def virtual_wan_link(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable egress through the virtual-wan-link. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "virtual_wan_link")

    @virtual_wan_link.setter
    def virtual_wan_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_wan_link", value)


@pulumi.input_type
class _RouterStatic6State:
    def __init__(__self__, *,
                 bfd: Optional[pulumi.Input[str]] = None,
                 blackhole: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 devindex: Optional[pulumi.Input[int]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 link_monitor_exempt: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 sdwan: Optional[pulumi.Input[str]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 virtual_wan_link: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RouterStatic6 resources.
        :param pulumi.Input[str] bfd: Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] blackhole: Enable/disable black hole. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comment: Optional comments.
        :param pulumi.Input[str] device: Gateway out interface or tunnel.
        :param pulumi.Input[int] devindex: Device index (0 - 4294967295).
        :param pulumi.Input[int] distance: Administrative distance (1 - 255).
        :param pulumi.Input[str] dst: Destination IPv6 prefix.
        :param pulumi.Input[str] gateway: IPv6 address of the gateway.
        :param pulumi.Input[str] link_monitor_exempt: Enable/disable withdrawal of this static route when link monitor or health check is down. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Administrative priority (0 - 4294967295).
        :param pulumi.Input[str] sdwan: Enable/disable egress through the SD-WAN. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] seq_num: Sequence number.
        :param pulumi.Input[str] status: Enable/disable this static route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] virtual_wan_link: Enable/disable egress through the virtual-wan-link. Valid values: `enable`, `disable`.
        """
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if blackhole is not None:
            pulumi.set(__self__, "blackhole", blackhole)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if devindex is not None:
            pulumi.set(__self__, "devindex", devindex)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if link_monitor_exempt is not None:
            pulumi.set(__self__, "link_monitor_exempt", link_monitor_exempt)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if sdwan is not None:
            pulumi.set(__self__, "sdwan", sdwan)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if virtual_wan_link is not None:
            pulumi.set(__self__, "virtual_wan_link", virtual_wan_link)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter
    def blackhole(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable black hole. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "blackhole")

    @blackhole.setter
    def blackhole(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blackhole", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Optional comments.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway out interface or tunnel.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def devindex(self) -> Optional[pulumi.Input[int]]:
        """
        Device index (0 - 4294967295).
        """
        return pulumi.get(self, "devindex")

    @devindex.setter
    def devindex(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "devindex", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Administrative distance (1 - 255).
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IPv6 prefix.
        """
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the gateway.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="linkMonitorExempt")
    def link_monitor_exempt(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable withdrawal of this static route when link monitor or health check is down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "link_monitor_exempt")

    @link_monitor_exempt.setter
    def link_monitor_exempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_monitor_exempt", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Administrative priority (0 - 4294967295).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def sdwan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable egress through the SD-WAN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sdwan")

    @sdwan.setter
    def sdwan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdwan", value)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this static route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="virtualWanLink")
    def virtual_wan_link(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable egress through the virtual-wan-link. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "virtual_wan_link")

    @virtual_wan_link.setter
    def virtual_wan_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_wan_link", value)


class RouterStatic6(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 blackhole: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 devindex: Optional[pulumi.Input[int]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 link_monitor_exempt: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 sdwan: Optional[pulumi.Input[str]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 virtual_wan_link: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure IPv6 static routing tables.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_fortios as fortios

        trname = fortios.RouterStatic6("trname",
            bfd="disable",
            blackhole="disable",
            device="port3",
            devindex=5,
            distance=10,
            dst="2001:db8::/32",
            gateway="::",
            priority=32,
            seq_num=1,
            status="enable",
            virtual_wan_link="disable")
        ```

        ## Import

        Router Static6 can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"

        ```sh
         $ pulumi import fortios:index/routerStatic6:RouterStatic6 labelname {{seq_num}}
        ```

         $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bfd: Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] blackhole: Enable/disable black hole. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comment: Optional comments.
        :param pulumi.Input[str] device: Gateway out interface or tunnel.
        :param pulumi.Input[int] devindex: Device index (0 - 4294967295).
        :param pulumi.Input[int] distance: Administrative distance (1 - 255).
        :param pulumi.Input[str] dst: Destination IPv6 prefix.
        :param pulumi.Input[str] gateway: IPv6 address of the gateway.
        :param pulumi.Input[str] link_monitor_exempt: Enable/disable withdrawal of this static route when link monitor or health check is down. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Administrative priority (0 - 4294967295).
        :param pulumi.Input[str] sdwan: Enable/disable egress through the SD-WAN. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] seq_num: Sequence number.
        :param pulumi.Input[str] status: Enable/disable this static route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] virtual_wan_link: Enable/disable egress through the virtual-wan-link. Valid values: `enable`, `disable`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RouterStatic6Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure IPv6 static routing tables.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_fortios as fortios

        trname = fortios.RouterStatic6("trname",
            bfd="disable",
            blackhole="disable",
            device="port3",
            devindex=5,
            distance=10,
            dst="2001:db8::/32",
            gateway="::",
            priority=32,
            seq_num=1,
            status="enable",
            virtual_wan_link="disable")
        ```

        ## Import

        Router Static6 can be imported using any of these accepted formats$ export "FORTIOS_IMPORT_TABLE"="true"

        ```sh
         $ pulumi import fortios:index/routerStatic6:RouterStatic6 labelname {{seq_num}}
        ```

         $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param RouterStatic6Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouterStatic6Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 blackhole: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 devindex: Optional[pulumi.Input[int]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 link_monitor_exempt: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 sdwan: Optional[pulumi.Input[str]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 virtual_wan_link: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouterStatic6Args.__new__(RouterStatic6Args)

            __props__.__dict__["bfd"] = bfd
            __props__.__dict__["blackhole"] = blackhole
            __props__.__dict__["comment"] = comment
            if device is None and not opts.urn:
                raise TypeError("Missing required property 'device'")
            __props__.__dict__["device"] = device
            __props__.__dict__["devindex"] = devindex
            __props__.__dict__["distance"] = distance
            __props__.__dict__["dst"] = dst
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["link_monitor_exempt"] = link_monitor_exempt
            __props__.__dict__["priority"] = priority
            __props__.__dict__["sdwan"] = sdwan
            __props__.__dict__["seq_num"] = seq_num
            __props__.__dict__["status"] = status
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["virtual_wan_link"] = virtual_wan_link
        super(RouterStatic6, __self__).__init__(
            'fortios:index/routerStatic6:RouterStatic6',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bfd: Optional[pulumi.Input[str]] = None,
            blackhole: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            devindex: Optional[pulumi.Input[int]] = None,
            distance: Optional[pulumi.Input[int]] = None,
            dst: Optional[pulumi.Input[str]] = None,
            gateway: Optional[pulumi.Input[str]] = None,
            link_monitor_exempt: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            sdwan: Optional[pulumi.Input[str]] = None,
            seq_num: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            virtual_wan_link: Optional[pulumi.Input[str]] = None) -> 'RouterStatic6':
        """
        Get an existing RouterStatic6 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bfd: Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] blackhole: Enable/disable black hole. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comment: Optional comments.
        :param pulumi.Input[str] device: Gateway out interface or tunnel.
        :param pulumi.Input[int] devindex: Device index (0 - 4294967295).
        :param pulumi.Input[int] distance: Administrative distance (1 - 255).
        :param pulumi.Input[str] dst: Destination IPv6 prefix.
        :param pulumi.Input[str] gateway: IPv6 address of the gateway.
        :param pulumi.Input[str] link_monitor_exempt: Enable/disable withdrawal of this static route when link monitor or health check is down. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Administrative priority (0 - 4294967295).
        :param pulumi.Input[str] sdwan: Enable/disable egress through the SD-WAN. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] seq_num: Sequence number.
        :param pulumi.Input[str] status: Enable/disable this static route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] virtual_wan_link: Enable/disable egress through the virtual-wan-link. Valid values: `enable`, `disable`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouterStatic6State.__new__(_RouterStatic6State)

        __props__.__dict__["bfd"] = bfd
        __props__.__dict__["blackhole"] = blackhole
        __props__.__dict__["comment"] = comment
        __props__.__dict__["device"] = device
        __props__.__dict__["devindex"] = devindex
        __props__.__dict__["distance"] = distance
        __props__.__dict__["dst"] = dst
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["link_monitor_exempt"] = link_monitor_exempt
        __props__.__dict__["priority"] = priority
        __props__.__dict__["sdwan"] = sdwan
        __props__.__dict__["seq_num"] = seq_num
        __props__.__dict__["status"] = status
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["virtual_wan_link"] = virtual_wan_link
        return RouterStatic6(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bfd(self) -> pulumi.Output[str]:
        """
        Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter
    def blackhole(self) -> pulumi.Output[str]:
        """
        Enable/disable black hole. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "blackhole")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Optional comments.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[str]:
        """
        Gateway out interface or tunnel.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def devindex(self) -> pulumi.Output[int]:
        """
        Device index (0 - 4294967295).
        """
        return pulumi.get(self, "devindex")

    @property
    @pulumi.getter
    def distance(self) -> pulumi.Output[int]:
        """
        Administrative distance (1 - 255).
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter
    def dst(self) -> pulumi.Output[str]:
        """
        Destination IPv6 prefix.
        """
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[str]:
        """
        IPv6 address of the gateway.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="linkMonitorExempt")
    def link_monitor_exempt(self) -> pulumi.Output[str]:
        """
        Enable/disable withdrawal of this static route when link monitor or health check is down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "link_monitor_exempt")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        Administrative priority (0 - 4294967295).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def sdwan(self) -> pulumi.Output[str]:
        """
        Enable/disable egress through the SD-WAN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sdwan")

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> pulumi.Output[int]:
        """
        Sequence number.
        """
        return pulumi.get(self, "seq_num")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable this static route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="virtualWanLink")
    def virtual_wan_link(self) -> pulumi.Output[str]:
        """
        Enable/disable egress through the virtual-wan-link. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "virtual_wan_link")

