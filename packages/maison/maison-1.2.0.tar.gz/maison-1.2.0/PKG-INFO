Metadata-Version: 2.1
Name: maison
Version: 1.2.0
Summary: Maison
Home-page: https://github.com/dbatten5/maison
License: MIT
Author: Dom Batten
Author-email: dominic.batten@googlemail.com
Requires-Python: >=3.6.1,<4.0.0
Classifier: Development Status :: 3 - Alpha
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Dist: click (>=8.0.1,<9.0.0)
Requires-Dist: pydantic (>=1.8.2,<2.0.0)
Project-URL: Changelog, https://github.com/dbatten5/maison/releases
Project-URL: Documentation, https://dbatten5.github.io/maison
Project-URL: Repository, https://github.com/dbatten5/maison
Description-Content-Type: text/markdown

[![Actions Status](https://github.com/dbatten5/maison/workflows/Tests/badge.svg)](https://github.com/dbatten5/maison/actions)
[![Actions Status](https://github.com/dbatten5/maison/workflows/Release/badge.svg)](https://github.com/dbatten5/maison/actions)
[![codecov](https://codecov.io/gh/dbatten5/maison/branch/main/graph/badge.svg?token=948J8ECAQT)](https://codecov.io/gh/dbatten5/maison)

# Maison

Read configuration settings from `python` configuration files.

## Motivation

When developing a `python` application, e.g a command-line tool, it can be
helpful to allow the user to set their own configuration options to allow them
to tailor the tool to their needs. These options are typically set in files in
the root of a project directory that uses the tool, for example in a
`pyproject.toml` file.

`maison` aims to provide a simple and flexible way to read and validate those
configuration options so that they may be used in the application.

## Installation

```bash
pip install maison
```

## Usage

Suppose the following `pyproject.toml` lives somewhere in a project directory:

```toml
[tool.acme]
enable_useful_option = true
```

`maison` exposes a `ProjectConfig` class to retrieve values from config files
like so:

```python
from maison import ProjectConfig

config = ProjectConfig(project_name="acme")

if config.get_option("enable_useful_option"):
    # include the useful option
```

## Help

See the [documentation](https://dbatten5.github.io/maison) for more details.

## Licence

MIT

