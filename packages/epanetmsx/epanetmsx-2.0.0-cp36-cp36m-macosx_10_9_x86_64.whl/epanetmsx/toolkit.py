# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _toolkit
else:
    import _toolkit

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _toolkit.intArray_swiginit(self, _toolkit.new_intArray(nelements))
    __swig_destroy__ = _toolkit.delete_intArray

    def __getitem__(self, index: "size_t") -> "int":
        return _toolkit.intArray___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "int") -> "void":
        return _toolkit.intArray___setitem__(self, index, value)

    def cast(self) -> "int *":
        return _toolkit.intArray_cast(self)

    @staticmethod
    def frompointer(t: "int *") -> "intArray *":
        return _toolkit.intArray_frompointer(t)

# Register intArray in _toolkit:
_toolkit.intArray_swigregister(intArray)

def intArray_frompointer(t: "int *") -> "intArray *":
    return _toolkit.intArray_frompointer(t)

class floatArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _toolkit.floatArray_swiginit(self, _toolkit.new_floatArray(nelements))
    __swig_destroy__ = _toolkit.delete_floatArray

    def __getitem__(self, index: "size_t") -> "float":
        return _toolkit.floatArray___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "float") -> "void":
        return _toolkit.floatArray___setitem__(self, index, value)

    def cast(self) -> "float *":
        return _toolkit.floatArray_cast(self)

    @staticmethod
    def frompointer(t: "float *") -> "floatArray *":
        return _toolkit.floatArray_frompointer(t)

# Register floatArray in _toolkit:
_toolkit.floatArray_swigregister(floatArray)

def floatArray_frompointer(t: "float *") -> "floatArray *":
    return _toolkit.floatArray_frompointer(t)

class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _toolkit.doubleArray_swiginit(self, _toolkit.new_doubleArray(nelements))
    __swig_destroy__ = _toolkit.delete_doubleArray

    def __getitem__(self, index: "size_t") -> "double":
        return _toolkit.doubleArray___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "double") -> "void":
        return _toolkit.doubleArray___setitem__(self, index, value)

    def cast(self) -> "double *":
        return _toolkit.doubleArray_cast(self)

    @staticmethod
    def frompointer(t: "double *") -> "doubleArray *":
        return _toolkit.doubleArray_frompointer(t)

# Register doubleArray in _toolkit:
_toolkit.doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t: "double *") -> "doubleArray *":
    return _toolkit.doubleArray_frompointer(t)


def open() -> "int":
    r"""open() -> int"""
    return _toolkit.open()

def close() -> "int":
    r"""close() -> int"""
    return _toolkit.close()

def init() -> "int":
    r"""init() -> int"""
    return _toolkit.init()

def printQuality(type: "int", id: "char *", species: "char *", fname: "char *") -> "int":
    r"""
    printQuality(type, id, species, fname) -> int

    Parameters
    ----------
    type: int
    id: char *
    species: char *
    fname: char *

    """
    return _toolkit.printQuality(type, id, species, fname)

def addNode(id: "char *") -> "int":
    r"""
    addNode(id) -> int

    Parameters
    ----------
    id: char *

    """
    return _toolkit.addNode(id)

def addTank(id: "char *", initialVolume: "double", mixModel: "int", volumeMix: "double") -> "int":
    r"""
    addTank(id, initialVolume, mixModel, volumeMix) -> int

    Parameters
    ----------
    id: char *
    initialVolume: double
    mixModel: int
    volumeMix: double

    """
    return _toolkit.addTank(id, initialVolume, mixModel, volumeMix)

def addReservoir(id: "char *", initialVolume: "double", mixModel: "int", volumeMix: "double") -> "int":
    r"""
    addReservoir(id, initialVolume, mixModel, volumeMix) -> int

    Parameters
    ----------
    id: char *
    initialVolume: double
    mixModel: int
    volumeMix: double

    """
    return _toolkit.addReservoir(id, initialVolume, mixModel, volumeMix)

def addLink(id: "char *", startNode: "char *", endNode: "char *", length: "double", diameter: "double", roughness: "double") -> "int":
    r"""
    addLink(id, startNode, endNode, length, diameter, roughness) -> int

    Parameters
    ----------
    id: char *
    startNode: char *
    endNode: char *
    length: double
    diameter: double
    roughness: double

    """
    return _toolkit.addLink(id, startNode, endNode, length, diameter, roughness)

def addOption(optionType: "int", value: "char *") -> "int":
    r"""
    addOption(optionType, value) -> int

    Parameters
    ----------
    optionType: int
    value: char *

    """
    return _toolkit.addOption(optionType, value)

def addSpecies(id: "char *", type: "int", units: "int", aTol: "double", rTol: "double") -> "int":
    r"""
    addSpecies(id, type, units, aTol, rTol) -> int

    Parameters
    ----------
    id: char *
    type: int
    units: int
    aTol: double
    rTol: double

    """
    return _toolkit.addSpecies(id, type, units, aTol, rTol)

def addCoefficeint(type: "int", id: "char *", value: "double") -> "int":
    r"""
    addCoefficeint(type, id, value) -> int

    Parameters
    ----------
    type: int
    id: char *
    value: double

    """
    return _toolkit.addCoefficeint(type, id, value)

def addTerm(id: "char *", equation: "char *") -> "int":
    r"""
    addTerm(id, equation) -> int

    Parameters
    ----------
    id: char *
    equation: char *

    """
    return _toolkit.addTerm(id, equation)

def addExpression(classType: "int", expressionType: "int", species: "char *", equation: "char *") -> "int":
    r"""
    addExpression(classType, expressionType, species, equation) -> int

    Parameters
    ----------
    classType: int
    expressionType: int
    species: char *
    equation: char *

    """
    return _toolkit.addExpression(classType, expressionType, species, equation)

def addSource(sourceType: "int", nodeId: "char *", speciesId: "char *", strength: "double", timePattern: "char *") -> "int":
    r"""
    addSource(sourceType, nodeId, speciesId, strength, timePattern) -> int

    Parameters
    ----------
    sourceType: int
    nodeId: char *
    speciesId: char *
    strength: double
    timePattern: char *

    """
    return _toolkit.addSource(sourceType, nodeId, speciesId, strength, timePattern)

def addQuality(type: "char *", speciesId: "char *", value: "double", id: "char *") -> "int":
    r"""
    addQuality(type, speciesId, value, id) -> int

    Parameters
    ----------
    type: char *
    speciesId: char *
    value: double
    id: char *

    """
    return _toolkit.addQuality(type, speciesId, value, id)

def addParameter(type: "char *", paramId: "char *", value: "double", id: "char *") -> "int":
    r"""
    addParameter(type, paramId, value, id) -> int

    Parameters
    ----------
    type: char *
    paramId: char *
    value: double
    id: char *

    """
    return _toolkit.addParameter(type, paramId, value, id)

def setReport(reportType: "char *", id: "char *", precision: "int") -> "int":
    r"""
    setReport(reportType, id, precision) -> int

    Parameters
    ----------
    reportType: char *
    id: char *
    precision: int

    """
    return _toolkit.setReport(reportType, id, precision)

def setHydraulics(demands: "float *", heads: "float *", flows: "float *") -> "int":
    r"""
    setHydraulics(demands, heads, flows) -> int

    Parameters
    ----------
    demands: float *
    heads: float *
    flows: float *

    """
    return _toolkit.setHydraulics(demands, heads, flows)

def setSize(type: "int", size: "int") -> "int":
    r"""
    setSize(type, size) -> int

    Parameters
    ----------
    type: int
    size: int

    """
    return _toolkit.setSize(type, size)

def getindex(type: "int", id: "char *") -> "int *":
    r"""
    getindex(type, id) -> int

    Parameters
    ----------
    type: int
    id: char *

    """
    return _toolkit.getindex(type, id)

def getIDlen(type: "int", index: "int") -> "int *":
    r"""
    getIDlen(type, index) -> int

    Parameters
    ----------
    type: int
    index: int

    """
    return _toolkit.getIDlen(type, index)

def getID(type: "int", index: "int", len: "int") -> "char *":
    r"""
    getID(type, index, len) -> int

    Parameters
    ----------
    type: int
    index: int
    len: int

    """
    return _toolkit.getID(type, index, len)

def getcount(type: "int") -> "int *":
    r"""
    getcount(type) -> int

    Parameters
    ----------
    type: int

    """
    return _toolkit.getcount(type)

def getspecies(index: "int") -> "int *, char *, double *, double *":
    r"""
    getspecies(index) -> int

    Parameters
    ----------
    index: int

    """
    return _toolkit.getspecies(index)

def getconstant(index: "int") -> "double *":
    r"""
    getconstant(index) -> int

    Parameters
    ----------
    index: int

    """
    return _toolkit.getconstant(index)

def getparameter(type: "int", index: "int", param: "int") -> "double *":
    r"""
    getparameter(type, index, param) -> int

    Parameters
    ----------
    type: int
    index: int
    param: int

    """
    return _toolkit.getparameter(type, index, param)

def getsource(node: "int", species: "int") -> "int *, double *, int *":
    r"""
    getsource(node, species) -> int

    Parameters
    ----------
    node: int
    species: int

    """
    return _toolkit.getsource(node, species)

def getpatternlen(pat: "int") -> "int *":
    r"""
    getpatternlen(pat) -> int

    Parameters
    ----------
    pat: int

    """
    return _toolkit.getpatternlen(pat)

def getpatternvalue(pat: "int", period: "int") -> "double *":
    r"""
    getpatternvalue(pat, period) -> int

    Parameters
    ----------
    pat: int
    period: int

    """
    return _toolkit.getpatternvalue(pat, period)

def getinitqual(type: "int", index: "int", species: "int") -> "double *":
    r"""
    getinitqual(type, index, species) -> int

    Parameters
    ----------
    type: int
    index: int
    species: int

    """
    return _toolkit.getinitqual(type, index, species)

def getQualityByIndex(type: "int", index: "int", species: "int") -> "double *":
    r"""
    getQualityByIndex(type, index, species) -> int

    Parameters
    ----------
    type: int
    index: int
    species: int

    """
    return _toolkit.getQualityByIndex(type, index, species)

def getQualityByID(type: "int", id: "char *", species: "char *") -> "double *":
    r"""
    getQualityByID(type, id, species) -> int

    Parameters
    ----------
    type: int
    id: char *
    species: char *

    """
    return _toolkit.getQualityByID(type, id, species)

def setconstant(index: "int", value: "double") -> "int":
    r"""
    setconstant(index, value) -> int

    Parameters
    ----------
    index: int
    value: double

    """
    return _toolkit.setconstant(index, value)

def setparameter(type: "int", index: "int", param: "int", value: "double") -> "int":
    r"""
    setparameter(type, index, param, value) -> int

    Parameters
    ----------
    type: int
    index: int
    param: int
    value: double

    """
    return _toolkit.setparameter(type, index, param, value)

def setinitqual(type: "int", index: "int", species: "int", value: "double") -> "int":
    r"""
    setinitqual(type, index, species, value) -> int

    Parameters
    ----------
    type: int
    index: int
    species: int
    value: double

    """
    return _toolkit.setinitqual(type, index, species, value)

def setsource(node: "int", species: "int", type: "int", level: "double", pat: "int") -> "int":
    r"""
    setsource(node, species, type, level, pat) -> int

    Parameters
    ----------
    node: int
    species: int
    type: int
    level: double
    pat: int

    """
    return _toolkit.setsource(node, species, type, level, pat)

def setpatternvalue(pat: "int", period: "int", value: "double") -> "int":
    r"""
    setpatternvalue(pat, period, value) -> int

    Parameters
    ----------
    pat: int
    period: int
    value: double

    """
    return _toolkit.setpatternvalue(pat, period, value)

def addpattern(id: "char *") -> "int":
    r"""
    addpattern(id) -> int

    Parameters
    ----------
    id: char *

    """
    return _toolkit.addpattern(id)

def setpattern(pat: "int", mult: "double []", len: "int") -> "int":
    r"""
    setpattern(pat, mult, len) -> int

    Parameters
    ----------
    pat: int
    mult: double []
    len: int

    """
    return _toolkit.setpattern(pat, mult, len)

def step(t: "long *") -> "long *, long *":
    r"""
    step(t) -> int

    Parameters
    ----------
    t: long *

    """
    return _toolkit.step(t)

def geterror(code: "int", msg: "char *", len: "int") -> "int":
    r"""
    geterror(code, msg, len) -> int

    Parameters
    ----------
    code: int
    msg: char *
    len: int

    """
    return _toolkit.geterror(code, msg, len)

def setFlowFlag(flag: "int") -> "int":
    r"""
    setFlowFlag(flag) -> int

    Parameters
    ----------
    flag: int

    """
    return _toolkit.setFlowFlag(flag)

def setTimeParameter(type: "int", value: "long") -> "int":
    r"""
    setTimeParameter(type, value) -> int

    Parameters
    ----------
    type: int
    value: long

    """
    return _toolkit.setTimeParameter(type, value)
ENUMSOPEN = _toolkit.ENUMSOPEN

NODE = _toolkit.NODE

LINK = _toolkit.LINK

TANK = _toolkit.TANK

SPECIES = _toolkit.SPECIES

TERM = _toolkit.TERM

PARAMETER = _toolkit.PARAMETER

CONSTANT = _toolkit.CONSTANT

PATTERN = _toolkit.PATTERN

MAX_OBJECTS = _toolkit.MAX_OBJECTS

US = _toolkit.US

SI = _toolkit.SI

CFS = _toolkit.CFS

GPM = _toolkit.GPM

MGD = _toolkit.MGD

IMGD = _toolkit.IMGD

AFD = _toolkit.AFD

LPS = _toolkit.LPS

LPM = _toolkit.LPM

MLD = _toolkit.MLD

CMH = _toolkit.CMH

CMD = _toolkit.CMD

MIX1 = _toolkit.MIX1

MIX2 = _toolkit.MIX2

FIFO = _toolkit.FIFO

LIFO = _toolkit.LIFO

BULK = _toolkit.BULK

WALL = _toolkit.WALL

NO_EXPR = _toolkit.NO_EXPR

RATE = _toolkit.RATE

FORMULA = _toolkit.FORMULA

EQUIL = _toolkit.EQUIL

EUL = _toolkit.EUL

RK5 = _toolkit.RK5

ROS2 = _toolkit.ROS2

NO_COUPLING = _toolkit.NO_COUPLING

FULL_COUPLING = _toolkit.FULL_COUPLING

MG = _toolkit.MG

UG = _toolkit.UG

MOLE = _toolkit.MOLE

MMOLE = _toolkit.MMOLE

FT2 = _toolkit.FT2

M2 = _toolkit.M2

CM2 = _toolkit.CM2

SECONDS = _toolkit.SECONDS

MINUTES = _toolkit.MINUTES

HOURS = _toolkit.HOURS

DAYS = _toolkit.DAYS

LENGTH_UNITS = _toolkit.LENGTH_UNITS

DIAM_UNITS = _toolkit.DIAM_UNITS

AREA_UNITS = _toolkit.AREA_UNITS

VOL_UNITS = _toolkit.VOL_UNITS

FLOW_UNITS = _toolkit.FLOW_UNITS

CONC_UNITS = _toolkit.CONC_UNITS

RATE_UNITS = _toolkit.RATE_UNITS

MAX_UNIT_TYPES = _toolkit.MAX_UNIT_TYPES

DIAMETER = _toolkit.DIAMETER

FLOW = _toolkit.FLOW

VELOCITY = _toolkit.VELOCITY

REYNOLDS = _toolkit.REYNOLDS

SHEAR = _toolkit.SHEAR

FRICTION = _toolkit.FRICTION

AREAVOL = _toolkit.AREAVOL

ROUGHNESS = _toolkit.ROUGHNESS

MAX_HYD_VARS = _toolkit.MAX_HYD_VARS

SERIES = _toolkit.SERIES

AVGERAGE = _toolkit.AVGERAGE

MINIMUM = _toolkit.MINIMUM

MAXIMUM = _toolkit.MAXIMUM

RANGE = _toolkit.RANGE

AREA_UNITS_OPTION = _toolkit.AREA_UNITS_OPTION

RATE_UNITS_OPTION = _toolkit.RATE_UNITS_OPTION

SOLVER_OPTION = _toolkit.SOLVER_OPTION

COUPLING_OPTION = _toolkit.COUPLING_OPTION

TIMESTEP_OPTION = _toolkit.TIMESTEP_OPTION

RTOL_OPTION = _toolkit.RTOL_OPTION

ATOL_OPTION = _toolkit.ATOL_OPTION

COMPILER_OPTION = _toolkit.COMPILER_OPTION

NO_COMPILER = _toolkit.NO_COMPILER

VC = _toolkit.VC

GC = _toolkit.GC

SCRATCH_FILE = _toolkit.SCRATCH_FILE

SAVED_FILE = _toolkit.SAVED_FILE

USED_FILE = _toolkit.USED_FILE

s_TITLE = _toolkit.s_TITLE

s_SPECIES = _toolkit.s_SPECIES

s_COEFF = _toolkit.s_COEFF

s_TERM = _toolkit.s_TERM

s_PIPE = _toolkit.s_PIPE

s_TANK = _toolkit.s_TANK

s_SOURCE = _toolkit.s_SOURCE

s_QUALITY = _toolkit.s_QUALITY

s_PARAMETER = _toolkit.s_PARAMETER

s_PATTERN = _toolkit.s_PATTERN

s_OPTION = _toolkit.s_OPTION

s_REPORT = _toolkit.s_REPORT

INP_ERR_FIRST = _toolkit.INP_ERR_FIRST

ERR_LINE_LENGTH = _toolkit.ERR_LINE_LENGTH

ERR_ITEMS = _toolkit.ERR_ITEMS

ERR_KEYWORD = _toolkit.ERR_KEYWORD

ERR_NUMBER = _toolkit.ERR_NUMBER

ERR_NAME = _toolkit.ERR_NAME

ERR_RESERVED_NAME = _toolkit.ERR_RESERVED_NAME

ERR_DUP_NAME = _toolkit.ERR_DUP_NAME

ERR_DUP_EXPR = _toolkit.ERR_DUP_EXPR

ERR_MATH_EXPR = _toolkit.ERR_MATH_EXPR

INP_ERR_LAST = _toolkit.INP_ERR_LAST

ERR_FIRST = _toolkit.ERR_FIRST

ERR_MEMORY = _toolkit.ERR_MEMORY

ERR_NO_EPANET_FILE = _toolkit.ERR_NO_EPANET_FILE

ERR_OPEN_MSX_FILE = _toolkit.ERR_OPEN_MSX_FILE

ERR_OPEN_HYD_FILE = _toolkit.ERR_OPEN_HYD_FILE

ERR_READ_HYD_FILE = _toolkit.ERR_READ_HYD_FILE

ERR_MSX_INPUT = _toolkit.ERR_MSX_INPUT

ERR_NUM_PIPE_EXPR = _toolkit.ERR_NUM_PIPE_EXPR

ERR_NUM_TANK_EXPR = _toolkit.ERR_NUM_TANK_EXPR

ERR_INTEGRATOR_OPEN = _toolkit.ERR_INTEGRATOR_OPEN

ERR_NEWTON_OPEN = _toolkit.ERR_NEWTON_OPEN

ERR_OPEN_OUT_FILE = _toolkit.ERR_OPEN_OUT_FILE

ERR_IO_OUT_FILE = _toolkit.ERR_IO_OUT_FILE

ERR_INTEGRATOR = _toolkit.ERR_INTEGRATOR

ERR_NEWTON = _toolkit.ERR_NEWTON

ERR_INVALID_OBJECT_TYPE = _toolkit.ERR_INVALID_OBJECT_TYPE

ERR_INVALID_OBJECT_INDEX = _toolkit.ERR_INVALID_OBJECT_INDEX

ERR_UNDEFINED_OBJECT_ID = _toolkit.ERR_UNDEFINED_OBJECT_ID

ERR_INVALID_OBJECT_PARAMS = _toolkit.ERR_INVALID_OBJECT_PARAMS

ERR_MSX_NOT_OPENED = _toolkit.ERR_MSX_NOT_OPENED

ERR_MSX_OPENED = _toolkit.ERR_MSX_OPENED

ERR_OPEN_RPT_FILE = _toolkit.ERR_OPEN_RPT_FILE

ERR_COMPILE_FAILED = _toolkit.ERR_COMPILE_FAILED

ERR_COMPILED_LOAD = _toolkit.ERR_COMPILED_LOAD

ERR_ILLEGAL_MATH = _toolkit.ERR_ILLEGAL_MATH

ERR_HYD = _toolkit.ERR_HYD

ERR_INIT = _toolkit.ERR_INIT

ERR_MAX = _toolkit.ERR_MAX

DURATION = _toolkit.DURATION

HYDSTEP = _toolkit.HYDSTEP

QUALSTEP = _toolkit.QUALSTEP

PATTERNSTEP = _toolkit.PATTERNSTEP

PATTERNSTART = _toolkit.PATTERNSTART

REPORTSTEP = _toolkit.REPORTSTEP

REPORTSTART = _toolkit.REPORTSTART

STATISTIC = _toolkit.STATISTIC

HTIME = _toolkit.HTIME

QTIME = _toolkit.QTIME

MAXID = _toolkit.MAXID

MAXMSG = _toolkit.MAXMSG

NOSOURCE = _toolkit.NOSOURCE

CONCEN = _toolkit.CONCEN

MASS = _toolkit.MASS

SETPOINT = _toolkit.SETPOINT

FLOWPACED = _toolkit.FLOWPACED



