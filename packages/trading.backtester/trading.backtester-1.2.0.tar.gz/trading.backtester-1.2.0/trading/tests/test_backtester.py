"""Tests for trading.backtester.backtester."""
# pylint: disable=line-too-long

from numpy.testing import assert_almost_equal
import pytest

from trading.backtester import ta
import trading.backtester as bt


@pytest.fixture(name="backtester", scope="class")
def fixture_backtester(input_dict_config):
    return bt.Backtester(input_dict_config)


class TestBacktester:

    def test_backtester_class_is_visible(self):
        assert hasattr(bt, "Backtester")

    def test_backtester_init(self, backtester):
        # Instance is already created in the fixture
        assert isinstance(backtester, bt.Backtester)

    def test_backtester_properties(self, backtester, input_dict_config):
        assert isinstance(backtester.config, bt.BacktesterConfig)
        assert isinstance(backtester.exchange, bt.exchange.BacktesterExchange)

        assert backtester.config.raw == input_dict_config
        assert backtester.minimum_indicator_period == 33

    def test_exchange_no_minimum_period(self, no_parameters_input_config):
        backtester = bt.Backtester(no_parameters_input_config)
        exchange = bt.exchange.BacktesterExchange(
            backtester,
            backtester.config.initial_balance,
            backtester.config.initial_balance_currency)

        assert backtester.minimum_indicator_period == 0

    def test_backtester_end_to_end_buy_at_start_missing_data(self):
        """Buy-at-Start Strategy Test Case

        Backtester Configuration:
            Start Time: 2017-09-04 00:00:00
            End Time: 2018-06-30 00:00:00
            Stating Balance: 100,000
            Signal Source Symbol:
                - BTC/USDT
                - ADA/USDT (partial data)
            Signal Source Exchange: Binance
            Timeframe: 1d

        Expected Final Equity:
            BTC/USDT: 141824.5778771789
            ADA/USDT: 5113.602638087386

        """
        backtester = bt.Backtester({
            "strategy_parameters": {},
            "initial_balance": 100000,
            "initial_balance_currency": "USD",
            "shared_balance": False,
            "trading_exchange": "bitmex",
            "starting_timestamp": "2017-09-04 00:00:00",
            "ending_timestamp": "2018-06-30 00:00:00",
            "assets": [
                {
                    "trading_symbol": "XBTUSD",
                    "trading_timeframe": "1d",
                    "signal_source_exchange": "binance",
                    "signal_source_symbol": "BTC/USDT",
                    "signal_timeframe": "1d",
                    "allocation": 0.91,
                },
                {
                    "trading_symbol": "ADAUSD",
                    "trading_timeframe": "1d",
                    "signal_source_exchange": "binance",
                    "signal_source_symbol": "ADA/USDT",
                    "signal_timeframe": "1d",
                    "allocation": 0.09,
                }
            ]
        })

        class BuyAtStartStrategy(bt.BacktesterStrategy):
            def start(self):
                self.buy()

            def next(self):
                pass

        backtester.set_strategy(BuyAtStartStrategy)
        backtester.run()

        assert_almost_equal(backtester.exchange.asset["XBTUSD"].equity, 141824.5778771789)
        assert_almost_equal(backtester.exchange.asset["ADAUSD"].equity, 5113.602638087386)

    def test_backtester_end_to_end_ema_cross_9_50_case(self):
        """EMA Cross Strategy Test Case

        Backtester Configuration:
            Start Time: 2017-10-05 00:00:00
            End Time: 2018-06-30 00:00:00
            Stating Balance: 100,000
            Signal Source Symbol:
                - BTC/USDT
            Signal Source Exchange: Binance
            Timeframe: 1d
            Indicators:
                - Fast MA: EMA(9)
                - Slow MA: EMA(50)

        Pine Script Equivalent Code:

        ```pinescript
        //@version=5
        strategy("EMA Cross", process_orders_on_close=true)

        fast_ma = ta.ema(close, 9)
        slow_ma = ta.ema(close, 50)

        if strategy.position_size <= 0 and fast_ma > slow_ma
            strategy.close("short")
            strategy.entry("long", strategy.long)

        if strategy.position_size >= 0 and fast_ma < slow_ma
            strategy.close("long")
            strategy.entry("short", strategy.short)
        ```
        """

        backtester = bt.Backtester({
            "strategy_parameters": {
                "fast_period": 9,
                "slow_period": 50
            },
            "initial_balance": 100000,
            "initial_balance_currency": "USD",
            "shared_balance": False,
            "trading_exchange": "bitmex",
            "starting_timestamp": "2017-10-05 00:00:00",
            "ending_timestamp": "2018-06-30 00:00:00",
            "assets": [
                {
                    "trading_symbol": "XBTUSD",
                    "trading_timeframe": "1d",
                    "signal_source_exchange": "binance",
                    "signal_source_symbol": "BTC/USDT",
                    "signal_timeframe": "1d",
                    "allocation": 1,
                }
            ]
        })

        class EMACrossStrategy(bt.BacktesterStrategy):
            def initialize(self):
                self.fast_ma = ta.ema(self.close, timeperiod=self.p.fast_period)
                self.slow_ma = ta.ema(self.close, timeperiod=self.p.slow_period)

            def next(self):
                if self.position_size[0] <= 0 and self.fast_ma[0] > self.slow_ma[0]:
                    self.exit("sell")
                    self.buy()

                if self.position_size[0] >= 0 and self.fast_ma[0] < self.slow_ma[0]:
                    self.exit("buy")
                    self.sell()

        backtester.set_strategy(EMACrossStrategy)
        backtester.run()

        expected_equity = [
            100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            101783.83805909472, 103041.86672817028, 108097.27823167763, 111520.74698946749,
            111430.12233163965, 112324.02159149945, 126501.77172370894, 131626.60777228748,
            136752.14272568218, 133024.6503728657, 134190.19063793702, 130345.74821255093,
            128413.50936415969, 132416.83615108457, 140014.1644709407, 140362.68500592903,
            138616.58780690658, 137822.39896748462, 127597.42150716492, 132558.71382876363,
            136560.64280605625, 134395.43568561395, 133249.46475539496, 143740.95791894099,
            142588.2309088325, 150567.39422658028, 157346.30500672112, 163543.2610432785,
            165757.8574373956, 171396.85446239077, 171115.42878975312, 162148.71296678105,
            164569.71924993536, 170136.72907886675, 164941.30364385672, 151591.9886870607,
            145489.8507372281, 135378.5617936693, 150637.05173992354, 153176.40590527974,
            168670.4267745776, 183217.89755453204, 179366.69904925645, 180828.5749563767,
            187259.8970746174, 191313.54500830531, 189158.82146010536, 191171.90029889828,
            186840.3212166535, 189589.57979512768, 202682.62965266762, 212653.90466472373,
            224814.38252924333, 230564.03948346272, 225696.86634377262, 229216.55099791958,
            251209.4547843529, 253702.68123184302, 260118.62744412836, 269753.96220788686,
            272572.6453314323, 315673.17347050505, 386704.03477750364, 369953.6160170346,
            341439.930295893, 347122.25941948965, 386447.0707734314, 380902.89183516096,
            373524.78665930487, 380553.20645881235, 408622.38871688064, 445031.3691778316,
            439378.6270247855, 439290.79798622226, 402923.2858776963, 384140.9178483982,
            360929.35703086597, 310467.73039979686, 309847.801827869, 314507.1672688896,
            319151.15680395486, 365504.154989132, 360168.7156226193, 330398.1660737624,
            334982.7486994546, 289812.76339975256, 319547.6688029857, 311711.5480042773,
            341883.50188587816, 347577.2464548053, 350839.5011683359, 395123.2751611558,
            397671.94805739407, 376244.45826722856, 347181.8992971347, 335474.31175348227,
            347287.89986091794, 308421.57006637263, 320098.63876638643, 331047.9145845127,
            313924.51362049, 315437.4095791894, 253935.416535622, 256003.9418231631,
            256628.762728804, 244677.25740431412, 213809.8932306409, 243395.46597148935,
            261332.85807805837, 260421.25322952267, 247589.12783667995, 251659.5494859555,
            253669.36676893974, 244304.04223248837, 235242.74129106358, 249895.28076171307,
            273506.3821658128, 272397.686159122, 297105.83515631006, 305294.4369506317,
            297678.00523246743, 321327.77936972765, 350328.1358111839, 333737.3003170698,
            334975.293714749, 330664.91474526084, 309700.0999433887, 313193.22621452186,
            324145.0646836407, 304596.23103929474, 313055.3089974676, 291853.09952637553,
            279037.5148808484, 275312.5851790245, 254821.39487423212, 270106.90914004424,
            252178.36982781318, 251060.35509024028, 268844.9200103438, 283441.7800639731,
            275986.79535834014, 286156.5593381837, 288591.31074938906, 271491.4395808435,
            265782.7850425051, 271427.1403377574, 257606.53056660216, 254834.2081291949,
            244921.87408996772, 246001.16011768335, 244697.984193482, 228941.9463636953,
            211712.67883336882, 198075.04960430026, 199028.71801833875, 208787.15570123546,
            192479.29763993857, 201072.35422996338, 200673.71057839622, 221609.97952458204,
            220093.59547376545, 219687.2609478915, 228984.67344317728, 221182.92236515932,
            212423.65743594948, 205801.38738703248, 206335.0486097628, 209798.07840177987,
            206056.68168693746, 213558.9159377865, 215197.7130713191, 222374.15334111784,
            229610.41152219134, 226324.91274542204, 244679.61154930468, 250018.5737659795,
            248230.87276045213, 250600.08931772967, 245408.96279606264, 237948.60108310595,
            250961.3467747501, 251502.69887178717, 255121.04159772134, 248831.4018625718,
            246220.77730622087, 251247.19093648475, 249940.16957513, 247592.53019299085,
            226886.7738406105, 227860.73761740298, 225262.93118489662, 217657.72467249594,
            223854.86028056694, 227698.16107997388, 221545.88890535902, 219302.7172325534,
            206933.6549933058, 205687.5197202129, 208428.24823358655, 211914.8532723659,
            228186.30932040897, 210396.29789728828, 219789.66112884833, 211472.23778815864,
            221734.7023777762, 223418.82345916494, 219315.49802438408, 215175.64376614775,
            219358.9056522565, 231270.14850056887, 230415.99075210677, 233974.23023688322,
            229111.86431471587, 222137.94263670026, 217929.0631341422, 220833.34179900476,
            213532.32111095602, 199248.12793895166, 200812.22574327243, 205882.8533991664,
            205494.5567498378, 200718.76888326296, 203849.8108937322, 210693.9840884352,
            205989.11906740055, 206139.02956365937, 199177.4422935638, 202634.3973133046,
            212220.36706853897, 223491.16950561898, 221758.18519285473, 224557.3841902447,
            227475.8948642457, 227356.58318763465, 233049.14964288095, 224455.62532490442,
            226479.65422455093, 223892.98656362918, 223039.0660153194, 220215.90980254632,
            218455.17307196197, 223845.78373331984, 220572.42163146564, 219769.73631605445,
            219005.00302501256, 221083.8251598423, 223733.58806127805, 240971.87193012968,
            238433.5931002788, 246545.83830922184, 252172.70032227878, 244031.99109505874,
            249892.73245829163, 247637.43341014453, 248452.6903336281, 242217.88433020504,
            241535.93389231875, 241054.41758313295, 242066.55063303237, 258050.0456961732,
            255559.91849724096, 255868.515895394, 253140.00254339192, 257438.54370352247,
            255945.3687447419, 262581.04300556594, 254422.78096707506, 249864.98004047156
        ]

        expected_position_size = [
            0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0,
            -256003.9418231631, -256003.9418231631, -256003.9418231631, -256003.9418231631,
            -256003.9418231631, -256003.9418231631, -256003.9418231631, -256003.9418231631,
            -256003.9418231631, -256003.9418231631, -256003.9418231631, -256003.9418231631,
            -256003.9418231631, -256003.9418231631, -256003.9418231631, -256003.9418231631,
            -256003.9418231631, -256003.9418231631, -256003.9418231631, -256003.9418231631,
            -256003.9418231631, -256003.9418231631, -256003.9418231631, -256003.9418231631,
            -256003.9418231631, -256003.9418231631, -256003.9418231631, -256003.9418231631,
            -256003.9418231631, -256003.9418231631, -256003.9418231631, -256003.9418231631,
            -256003.9418231631, -256003.9418231631, -256003.9418231631, -256003.9418231631,
            -256003.9418231631, -256003.9418231631, -256003.9418231631, -256003.9418231631,
            -256003.9418231631, -256003.9418231631, -256003.9418231631, -256003.9418231631,
            -256003.9418231631, 244921.87408996772, 244921.87408996772, 244921.87408996772,
            244921.87408996772, 244921.87408996772, -198075.04960430026, -198075.04960430026,
            -198075.04960430026, -198075.04960430026, -198075.04960430026, -198075.04960430026,
            -198075.04960430026, -198075.04960430026, -198075.04960430026, -198075.04960430026,
            -198075.04960430026, -198075.04960430026, -198075.04960430026, -198075.04960430026,
            -198075.04960430026, -198075.04960430026, -198075.04960430026, -198075.04960430026,
            -198075.04960430026, -198075.04960430026, -198075.04960430026, -198075.04960430026,
            -198075.04960430026, -198075.04960430026, -198075.04960430026, -198075.04960430026,
            -198075.04960430026, -198075.04960430026, -198075.04960430026, -198075.04960430026,
            -198075.04960430026, -198075.04960430026, -198075.04960430026, -198075.04960430026,
            -198075.04960430026, -198075.04960430026, -198075.04960430026, -198075.04960430026,
            -198075.04960430026, -198075.04960430026, -198075.04960430026, -198075.04960430026,
            -198075.04960430026, -198075.04960430026, -198075.04960430026, 208428.24823358655,
            208428.24823358655, 208428.24823358655, 208428.24823358655, 208428.24823358655,
            208428.24823358655, 208428.24823358655, 208428.24823358655, 208428.24823358655,
            208428.24823358655, 208428.24823358655, 208428.24823358655, 208428.24823358655,
            208428.24823358655, 208428.24823358655, 208428.24823358655, 208428.24823358655,
            208428.24823358655, 208428.24823358655, 208428.24823358655, 208428.24823358655,
            208428.24823358655, 208428.24823358655, -200718.76888326296, -200718.76888326296,
            -200718.76888326296, -200718.76888326296, -200718.76888326296, -200718.76888326296,
            -200718.76888326296, -200718.76888326296, -200718.76888326296, -200718.76888326296,
            -200718.76888326296, -200718.76888326296, -200718.76888326296, -200718.76888326296,
            -200718.76888326296, -200718.76888326296, -200718.76888326296, -200718.76888326296,
            -200718.76888326296, -200718.76888326296, -200718.76888326296, -200718.76888326296,
            -200718.76888326296, -200718.76888326296, -200718.76888326296, -200718.76888326296,
            -200718.76888326296, -200718.76888326296, -200718.76888326296, -200718.76888326296,
            -200718.76888326296, -200718.76888326296, -200718.76888326296, -200718.76888326296,
            -200718.76888326296, -200718.76888326296, -200718.76888326296, -200718.76888326296,
            -200718.76888326296, -200718.76888326296, -200718.76888326296, -200718.76888326296,
            -200718.76888326296, -200718.76888326296, -200718.76888326296, -200718.76888326296,
            -200718.76888326296
        ]

        assert_almost_equal(backtester.exchange.equity, expected_equity)
        assert_almost_equal(backtester.exchange.position_size, expected_position_size)
