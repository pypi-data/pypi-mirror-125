# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .get_subscription_jobs import *
from .get_synchronization_jobs import *
from .job_monitor_rule import *
from .subscription_job import *
from .synchronization_instance import *
from .synchronization_job import *
from . import outputs

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "alicloud:dts/jobMonitorRule:JobMonitorRule":
                return JobMonitorRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "alicloud:dts/subscriptionJob:SubscriptionJob":
                return SubscriptionJob(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "alicloud:dts/synchronizationInstance:SynchronizationInstance":
                return SynchronizationInstance(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "alicloud:dts/synchronizationJob:SynchronizationJob":
                return SynchronizationJob(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("alicloud", "dts/jobMonitorRule", _module_instance)
    pulumi.runtime.register_resource_module("alicloud", "dts/subscriptionJob", _module_instance)
    pulumi.runtime.register_resource_module("alicloud", "dts/synchronizationInstance", _module_instance)
    pulumi.runtime.register_resource_module("alicloud", "dts/synchronizationJob", _module_instance)

_register_module()
