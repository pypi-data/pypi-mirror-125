Metadata-Version: 2.1
Name: dpm360-lightsaber
Version: 0.2.5
Summary: Package to handle model training for dpm tasks
Home-page: https://ibm.github.io/DPM360/Lightsaber/
Author: Prithwish Chakraborty
Author-email: prithwish.chakraborty@ibm.com
License: UNKNOWN
Platform: UNKNOWN
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: scikit-learn (==0.23.*)
Requires-Dist: mlflow (>=1.2.0)
Requires-Dist: pytorch-lightning (==0.8.5)
Requires-Dist: torch (>=1.1.0)
Requires-Dist: toolz
Requires-Dist: tabulate
Provides-Extra: doc
Requires-Dist: mkdocs (==1.2.2) ; extra == 'doc'
Requires-Dist: mkdocs-material (==7.2.6) ; extra == 'doc'
Requires-Dist: mkdocstrings (==0.15.2) ; extra == 'doc'
Requires-Dist: mknotebooks (==0.7.0) ; extra == 'doc'
Requires-Dist: mkdocs-monorepo-plugin (==0.4.16) ; extra == 'doc'
Requires-Dist: pytkdocs[numpy-style] (==0.11.1) ; extra == 'doc'
Provides-Extra: full
Requires-Dist: pysurvival (==0.1.2) ; extra == 'full'
Requires-Dist: mkdocs (==1.2.2) ; extra == 'full'
Requires-Dist: mkdocs-material (==7.2.6) ; extra == 'full'
Requires-Dist: mkdocstrings (==0.15.2) ; extra == 'full'
Requires-Dist: mknotebooks (==0.7.0) ; extra == 'full'
Requires-Dist: mkdocs-monorepo-plugin (==0.4.16) ; extra == 'full'
Requires-Dist: pytkdocs[numpy-style] (==0.11.1) ; extra == 'full'
Provides-Extra: t2e
Requires-Dist: pysurvival (==0.1.2) ; extra == 't2e'

# Welcome to lightsaber

<!-- For full documentation visit [mkdocs.org](https://www.mkdocs.org). -->

`lightsaber` is designed ground up to provide a _simple_, _composible_, and unified
model training framework. It has been designed based on state-of-the-art open source
tools and extended to support the common use cases for disease progression modeling (DPM). 

`lightsaber` provides four main components:

* Data ingestion modules
* Model Trainers
* DPM problem specific model evaluation
* Model tracking and support for post-hoc model evaluation.

Each of these components are designed such that a user should be able to pick some
or all of the modules and embed these seamlessly with their current workflow. 
Futhermore, when used in the recommended manner, `lightsaber` provides a _batteries included_
approach allowing the modeler to focus only on developing the logic of their model and
letting `lightsaber` handle the rest.

Currently, we support the following DPM use cases:

* classification: one or multi-class

Also, we support and extend the following frameworks:

* `scikit-learn` compliant models: for classical models
* `pytorch` compliant models: for general purpose models, including deep learning models.


To summarize, it is thus an `opinionated` take on how DPM should be conducted providing with a 
unified core to abstract and standardize out the engineering, evaluation, model training, and model tracking
to support: **(a) reproducible research, (b) accelarate model development, and (c) standardize model deployment**.

## Installation Instructions

From source: 

* for barebones `lightsaber`: `pip install .` 
* For support with doc: `pip install .[doc]`
* For all: `pip install .[full]`




