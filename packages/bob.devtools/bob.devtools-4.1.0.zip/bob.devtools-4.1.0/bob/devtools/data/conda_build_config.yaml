# This differs from target_platform in that it determines what subdir the compiler
#    will target, not what subdir the compiler package will be itself.
#    For example, we need a win-64 vs2008_win-32 package, so that we compile win-32
#    code on win-64 miniconda.
cross_compiler_target_platform:  # [win]
  - win-64                     # [win]
c_compiler:
  - gcc                        # [linux]
  - clang                      # [osx]
  - vs2017                     # [win]
c_compiler_version:            # [unix]
  - 11                         # [osx]
  - 9                          # [linux]
cxx_compiler:
  - gxx                        # [linux]
  - clangxx                    # [osx]
  - vs2017                     # [win]
cxx_compiler_version:          # [unix]
  - 11                         # [osx]
  - 9                          # [linux]
llvm_openmp:                   # [osx]
  - 11                         # [osx]
fortran_compiler:              # [unix or win64]
  - gfortran                   # [linux64 or (osx and x86_64)]
  - gfortran                   # [aarch64 or ppc64le or armv7l or s390x]
  - flang                      # [win64]
fortran_compiler_version:      # [unix or win64]
  - 11                         # [osx and arm64]
  - 9                          # [osx and x86_64]
  - 9                          # [linux]
  - 5                          # [win64]
m2w64_c_compiler:              # [win]
  - m2w64-toolchain            # [win]
m2w64_cxx_compiler:            # [win]
  - m2w64-toolchain            # [win]
m2w64_fortran_compiler:        # [win]
  - m2w64-toolchain            # [win]
CMAKE_GENERATOR:               # [win]
  - NMake Makefiles            # [win]

cuda_compiler:                 # [linux64]
  - nvcc                       # [linux64]
cuda_compiler_version:
  - None
  - 10.2                       # [linux64]
cudnn:
  - undefined
  - 7                          # [linux64]

_libgcc_mutex:
  - 0.1 conda_forge
#
# Go Compiler Options
#

# The basic go-compiler with CGO disabled,
# It generates fat binaries without libc dependencies
# The activation scripts will set your CC,CXX and related flags
# to invalid values.
go_compiler:
  - go-nocgo
# The go compiler build with CGO enabled.
# It can generate fat binaries that depend on conda's libc.
# You should use this compiler if the underlying
# program needs to link against other C libraries, in which
# case make sure to add  'c,cpp,fortran_compiler' for unix
# and the m2w64 equivalent for windows.
cgo_compiler:
  - go-cgo
# The following are helpful variables to simplify go meta.yaml files.
target_goos:
  - linux                      # [linux]
  - darwin                     # [osx]
  - windows                    # [win]
target_goarch:
  - amd64                      # [x86_64]
target_goexe:
  -                            # [unix]
  - .exe                       # [win]
target_gobin:
  - '${PREFIX}/bin/'           # [unix]
  - '%PREFIX%\bin\'            # [win]

# Rust Compiler Options
rust_compiler:
  - rust
rust_compiler_version:
  - 1.40.0

CONDA_BUILD_SYSROOT:            # [osx]
  - /opt/MacOSX10.9.sdk         # [osx and x86_64]
  - /opt/MacOSX11.0.sdk         # [osx and arm64]
# This helps CMAKE find the sysroot. See
# https://cmake.org/cmake/help/v3.11/variable/CMAKE_OSX_SYSROOT.html
SDKROOT:                        # [osx]
  - /opt/MacOSX10.12.sdk        # [osx and x86_64]
  - /opt/MacOSX11.0.sdk         # [osx and arm64]
macos_machine:                 # [osx]
  - x86_64-apple-darwin13.4.0  # [osx and x86_64]
  - arm64-apple-darwin20.0.0   # [osx and arm64]
# https://conda-forge.org/docs/maintainer/knowledge_base.html#requiring-newer-macos-sdks
# This is the version of the SDK we will use (headers and such)
MACOSX_SDK_VERSION:            # [osx]
  - 11.0                       # [osx and arm64]
  - 10.9                       # [osx and x86_64]
# This is the minimum base system we will target (needs to be smaller or equal
# to the SDK version, for obvious reasons)
MACOSX_DEPLOYMENT_TARGET:      # [osx]
  - 11.0                       # [osx and arm64]
  - 10.9                       # [osx and x86_64]
target_platform:               # [win]
  - win-64                     # [win]
VERBOSE_AT:
  - V=1
# makes cmake verbose
VERBOSE_CM:
  - VERBOSE=1

# dual build configuration
channel_sources:
  - conda-forge,defaults                        # [not (aarch64 or armv7l or (osx and arm64) or s390x)]
  - conda-forge                                 # [osx and arm64]
  - conda-forge                                 # [aarch64]
  - conda-forge,c4armv7l,defaults               # [armv7l]
  - https://conda-web.anaconda.org/conda-forge  # [s390x]

## the dependencies that we build against multiple versions
python:
  # part of a zip_keys: python, python_impl, numpy
  - 3.8.* *_cpython
python_impl:
  # part of a zip_keys: python, python_impl, numpy
  - cpython

zip_keys:
  -                             # [unix]
    - c_compiler_version        # [unix]
    - cxx_compiler_version      # [unix]
    - fortran_compiler_version  # [unix]
  # -
  #   - python
  #   - numpy
  #   - python_impl


# TODO: remove these when run_exports are added to the packages.
pin_run_as_build:
  arpack:
    max_pin: x.x.x
  boost:
    max_pin: x.x.x
  boost-cpp:
    max_pin: x.x.x
  bzip2:
    max_pin: x
  cairo:
    max_pin: x.x
  curl:
    max_pin: x
  dbus:
    max_pin: x
  fftw:
    max_pin: x
  flann:
    max_pin: x.x.x
  fontconfig:
    max_pin: x
  freetype:
    max_pin: x
  gdal:
    max_pin: x.x
  geotiff:
    max_pin: x.x.x
  glew:
    max_pin: x.x
  glpk:
    max_pin: x.x
  gmp:
    max_pin: x
  graphviz:
    max_pin: x
  harfbuzz:
    max_pin: x
  hdf4:
    max_pin: x.x
  isl:
    max_pin: x.x
  jasper:
    max_pin: x
  jpeg:
    max_pin: x
  libjpeg_turbo:
    max_pin: x
  json-c:
    max_pin: x.x
  jsoncpp:
    max_pin: x.x.x
  kealib:
    max_pin: x.x
  krb5:
    max_pin: x.x
  libblitz:
    max_pin: x.x
  libcurl:
    max_pin: x
  libevent:
    max_pin: x.x.x
  libffi:
    max_pin: x.x
  libgdal:
    max_pin: x.x
  libiconv:
    max_pin: x.x
  libkml:
    max_pin: x.x
  libpng:
    max_pin: x.x
  librsvg:
    max_pin: x
  libsvm:
    max_pin: x.x
  libtiff:
    max_pin: x
  libxml2:
    max_pin: x.x
  libuuid:
    max_pin: x
  lz4-c:
    max_pin: x.x.x
  lzo:
    max_pin: x
  metis:
    max_pin: x.x
  mpfr:
    max_pin: x
  ncurses:
    max_pin: x.x
  netcdf-cxx4:
    max_pin: x.x
  netcdf-fortran:
    max_pin: x.x
  nettle:
    max_pin: x.x
  nlopt:
    max_pin: x.x.x
  nss:
    max_pin: x
  nspr:
    max_pin: x
  occt:
    max_pin: x.x
  openturns:
    max_pin: x.x
  openjpeg:
    max_pin: x.x
  pango:
    max_pin: x.x
  perl:
    max_pin: x.x.x
  poppler:
    max_pin: x.x
  qt:
    max_pin: x.x
  qtkeychain:
    max_pin: x.x
  readline:
    max_pin: x
  r-base:
    max_pin: x.x
    min_pin: x.x
  sox:
    max_pin: x.x.x
  spdlog:
    max_pin: x.x
  sqlite:
    max_pin: x
  tk:
    max_pin: x.x
  tiledb:
    max_pin: x.x
  vlfeat:
    max_pin: x.x.x
  vtk:
    max_pin: x.x.x
  xz:
    max_pin: x.x
  zeromq:
    max_pin: x.x  # [not win]
  zlib:
    max_pin: x.x


# Here is the version of dependencies are used when building packages (build
# and host requirements). We keep a list of **all of them** here to make sure
# everything goes as expected in our conda build process.
# Ideally we want to build against the oldest possible version of
# packages so packages can be installed with a wide range of versions. It is
# best to keep this in sync with:
# https://github.com/conda-forge/conda-forge-pinning-feedstock/blob/master/recipe/conda_build_config.yaml
# The names here should not contain dots or dashes. You should replace dots and
# dashes with underlines.

# blas
libblas:
  - 3.8 *netlib  # [not (osx and arm64)]
  - 3.9 *netlib  # [osx and arm64]
libcblas:
  - 3.8 *netlib  # [not (osx and arm64)]
  - 3.9 *netlib  # [osx and arm64]
liblapack:
  - 3.8 *netlib  # [not (osx and arm64)]
  - 3.9 *netlib  # [osx and arm64]
liblapacke:
  - 3.8 *netlib  # [not (osx and arm64)]
  - 3.9 *netlib  # [osx and arm64]
blas_impl:
  - openblas
  - mkl          # [x86 or x86_64]
  - blis         # [x86 or x86_64]

# AUTOMATIC PARSING START
# DO NOT MODIFY THIS COMMENT

# list all packages with dashes or dots in their names, here:
package_names_map:
  click_plugins: click-plugins
  dask_jobqueue: dask-jobqueue
  dask_ml: dask-ml
  docker_py: docker-py
  font_ttf_dejavu_sans_mono: font-ttf-dejavu-sans-mono
  pkg_config: pkg-config
  pytest_cov: pytest-cov
  python_graphviz: python-graphviz
  scikit_image: scikit-image
  scikit_learn: scikit-learn
  sphinxcontrib_httpdomain: sphinxcontrib-httpdomain
  sphinxcontrib_mermaid: sphinxcontrib-mermaid
  sphinxcontrib_programoutput: sphinxcontrib-programoutput
  zc_buildout: zc.buildout
  zc_recipe_egg: zc.recipe.egg


boost:
  - 1.76.0
click:
  - 8.0.3
click_plugins:
  - 1.1.1
cmake:
  - 3.21.3
coverage:
  - 6.0.2
dask:
  - 2021.9.1
dask_jobqueue:
  - 0.7.3
dask_ml:
  - 1.9.0
ddt:
  - 1.4.1
distributed:
  - 2021.9.1
docker_py:
  - 5.0.3
docopt:
  - 0.6.2
ffmpeg:
  - 4.4.0
flaky:
  - 3.7.0
font_ttf_dejavu_sans_mono:
  - 2.37
freetype:
  - 2.10.4
giflib:
  - 5.2.1
graphviz:
  - 2.49.1
h5py:
  - 2.10.0
hdf5:
  - 1.10.6
jinja2:
  - 3.0.2
jpeg:
  - 9d
jsonschema:
  - 3.2.0
libblitz:
  - 1.0.2
libpng:
  - 1.6.37
libtiff:
  - 4.3.0
make:
  - 4.3
matplotlib:
  - 3.4.3
mkl:
  - 2020.4
ncurses:
  - 6.2
nose:
  - 1.3.7
numba:
  - 0.54.1
numpy:
  - 1.20.3
opencv:
  - 4.5.1
pandas:
  - 1.3.3
pillow:
  - 8.3.2
pip:
  - 21.3
pkg_config:
  - 0.29.2
psutil:
  - 5.8.0
psycopg2:
  - 2.9.1
pybind11:
  - 2.8.0
pyopengl:
  - 3.1.5
pyqt:
  - 5.12.3
pyqtgraph:
  - 0.12.3
pytables:
  - 3.6.1
pytest:
  - 6.2.5
pytest_cov:
  - 3.0.0
python_graphviz:
  - 0.17
pytorch:
  - 1.8.0 cuda*  # [linux]
  - 1.8.0  # [osx]
pyyaml:
  - 5.4.1
pyzmq:
  - 22.3.0
qdarkstyle:
  - 3.0.2
qtpy:
  - 1.11.2
requests:
  - 2.26.0
schema:
  - 0.7.4
scikit_image:
  - 0.18.3
scikit_learn:
  - 1.0
scipy:
  - 1.7.1
setuptools:
  - 58.2.0
simplejson:
  - 3.17.5
six:
  - 1.16.0
sox:
  - 14.4.2
sphinx:
  - 4.2.0
sphinx_rtd_theme:
  - 1.0.0
sphinxcontrib_httpdomain:
  - 1.8.0
sphinxcontrib_mermaid:
  - 0.7.1
sphinxcontrib_programoutput:
  - 0.16
sqlalchemy:
  - 1.4.25
tabulate:
  - 0.8.9
tensorflow:
  - 2.4.1
termcolor:
  - 1.1.0
torchvision:
  - 0.10.1
tqdm:
  - 4.62.3
xarray:
  - 0.19.0

# AUTOMATIC PARSING END
