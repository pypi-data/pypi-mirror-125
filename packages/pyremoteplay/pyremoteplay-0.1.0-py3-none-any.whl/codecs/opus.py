"""Bindings for Opus."""
from av import AudioFrame

from ._opus import ffi, lib

SAMPLE_RATE = 48000
CHANNELS = 2
ENC = b"\xf4\x9c\xf3\xf2z\xf9b\xee`j0\x11\xa4\xe0\x17k\xb6\x9d\xed\xfe[\x15\xa8\x01*U<\xf9\xe7\x8b;c\xe7o\x1ez\xd1ha\xe6\xb2\x13\xf9\r=\x06\xa4\xc3J2\xceu\x81t\t>^\x86\xfb\x08qJi6\xb8\x7f\xb1\x84\xff\xfc\x173\xedJ\xce\x86\x0e'?\x9e"
DEC = b'\xab\x01\x1f\x02\xa6\x01 \x02\xb2\x01&\x02\xc4\x01.\x02\xd4\x019\x02\xe3\x01G\x02\xdf\x01B\x02\xc7\x01\'\x02\xa0\x01\xfa\x01]\x01\xb4\x01\x05\x01_\x01\x9b\x00\xfb\x00,\x00\x8f\x00\xc6\xff$\x00f\xff\xb7\xff\x16\xffQ\xff\xda\xfe\xf3\xfe\xb7\xfe\xa4\xfe\xb5\xfeo\xfe\xcb\xfeP\xfe\xfd\xfeP\xfeF\xffn\xfe\xa5\xff\xa6\xfe\x13\x00\xf3\xfe\x81\x00F\xff\xf3\x00\xa2\xffb\x01\xfe\xff\xca\x01R\x00/\x02\xa0\x00\x86\x02\xdd\x00\xce\x02\x0b\x01\x08\x03,\x01/\x03=\x01F\x03A\x01M\x037\x01L\x03&\x01L\x03\x15\x01O\x03\x03\x01Y\x03\xf8\x00m\x03\x00\x01\x83\x03\x1b\x01\x9d\x03M\x01\xbd\x03\x97\x01\xd9\x03\xe6\x01\xf4\x03;\x02\x02\x04\x89\x02\x03\x04\xce\x02\x02\x04\x0f\x03\xee\x03;\x03\xd7\x03]\x03\xc8\x03\x7f\x03\xb7\x03\x96\x03\xa9\x03\xa9\x03\xa0\x03\xb7\x03\x96\x03\xbc\x03\x8e\x03\xb7\x03\x83\x03\xab\x03p\x03\x96\x03Q\x03\x80\x03\'\x03m\x03\xf0\x02X\x03\xb5\x02>\x03}\x02\x1e\x03C\x02\xf5\x02\x07\x02\xc8\x02\xc6\x01\x9b\x02~\x01g\x02.\x01$\x02\xd7\x00\xd2\x01u\x00r\x01\x02\x00\x05\x01\x87\xff\x95\x00\x02\xff\x1c\x00v\xfe\x9a\xff\xee\xfd\x19\xffi\xfd\x96\xfe\xec\xfc\x16\xfez\xfc\x97\xfd\x18\xfc#\xfd\xca\xfb\xc1\xfc\x8a\xfbq\xfcd\xfb=\xfcK\xfb\x17\xfcB\xfb\x02\xfcO\xfb\x04\xfcc\xfb\x0f\xfc\x85\xfb"\xfc\xb9\xfb;\xfc\xf9\xfbT\xfcI\xfcp\xfc\x99\xfc\x84\xfc\xe4\xfc\x90\xfc*\xfd\x95\xfc[\xfd\x8c\xfcr\xfdv\xfcn\xfdY\xfcU\xfd7\xfc-\xfd\n\xfc\x01\xfd\xda\xfb\xd6\xfc\xac\xfb\xb1\xfc\x8c\xfb\x99\xfc\x86\xfb\x8d\xfc\x93\xfb\x9c\xfc\xb9\xfb\xc3\xfc\xf3\xfb\xfc\xfc5\xfcF\xfd\x82\xfc\x99\xfd\xce\xfc\xf6\xfd\x1d\xfdV\xfei\xfd\xb5\xfe\xb1\xfd\x13\xff\xfa\xfdd\xff:\xfe\xac\xffv\xfe\xe7\xff\xa7\xfe\x0e\x00\xc7\xfe%\x00\xda\xfe+\x00\xe3\xfe\x1a\x00\xe5\xfe\xf2\xff\xe1\xfe\xbf\xff\xde\xfe\x88\xff\xd8\xfeZ\xff\xcb\xfeH\xff\xc4\xfeA\xff\xb9\xfeN\xff\xb8\xfev\xff\xca\xfe\x9f\xff\xd2\xfe\xcf\xff\xd5\xfe\xff\xff\xd5\xfe\x1b\x00\xc7\xfe!\x00\xae\xfe\x0c\x00\x86\xfe\xde\xffQ\xfe\x97\xff\x12\xfe;\xff\xcb\xfd\xd0\xfe\x80\xfdY\xfe+\xfd\xe8\xfd\xdb\xfc\x80\xfd\x94\xfc#\xfd[\xfc\xde\xfc=\xfc\xaf\xfc6\xfc\xa1\xfcI\xfc\xb5\xfcx\xfc\xde\xfc\xba\xfc\x1b\xfd\x10\xfdi\xfdx\xfd\xc0\xfd\xe5\xfd"\xfeW\xfe\x89\xfe\xc3\xfe\xeb\xfe#\xffF\xffu\xff\x94\xff\xba\xff\xcc\xff\xef\xff\xe9\xff\x11\x00\xf5\xff"\x00\xf7\xff%\x00\xf1\xff\x17\x00\xf2\xff\x08\x00\xfc\xff\x00\x00\x0e\x00\x04\x007\x00%\x00w\x00b\x00\xcc\x00\xb6\x00:\x01$\x01\xae\x01\x96\x01&\x02\x0e\x02\xa3\x02\x89\x02\x0b\x03\xf3\x02d\x03S\x03\xaf\x03\xad\x03\xde\x03\xf7\x03\xfe\x03;\x04\x0e\x04t\x04\r\x04\x9b\x04\x06\x04\xb5\x04\xf3\x03\xbb\x04\xd6\x03\xb9\x04\xa9\x03\xaf\x04f\x03\x9c\x04#\x03\x8e\x04\xe6\x02\x7f\x04\xb6\x02m\x04\x98\x02^\x04\x86\x02R\x04\x81\x02N\x04\x81\x02H\x04\x80\x02;\x04z\x02#\x04i\x02\xfe\x03I\x02\xc7\x03\x16\x02{\x03\xd4\x01\x1f\x03\x7f\x01\xb6\x02\x1b\x01E\x02\xaf\x00\xd1\x01A\x00\\\x01\xdc\xff\xeb\x00~\xff}\x000\xff\x1c\x00\xf2\xfe\xcb\xff\xc9\xfe\x8b\xff\xba\xfe`\xff\xbb\xfeB\xff\xcb\xfe7\xff\xe6\xfe?\xff\x05\xffR\xff&\xffk\xffD\xff\x7f\xffn\xff\x98\xff\x9c\xff\xab\xff\xcc\xff\xb6\xff\x05\x00\xc2\xff4\x00\xc3\xff^\x00\xc5\xff\x82\x00\xc6\xff\x9b\x00\xb9\xff\xb5\x00\xa5\xff\xce\x00\x8c\xff\xec\x00x\xff\x0b\x01m\xff*\x01k\xffV\x01\x81\xff\x88\x01\xaa\xff\xbf\x01\xe3\xff\xf7\x01+\x00.\x02{\x00_\x02\xcd\x00\x86\x02\x1b\x01\xa0\x02c\x01\xa8\x02\xa1\x01\xa7\x02\xdd\x01\x9c\x02\x16\x02\x81\x02C\x02l\x02t\x02]\x02\xa0\x02S\x02\xbd\x02R\x02\xd3\x02I\x02\xdd\x020\x02\xe2\x02\x07\x02\xe6\x02\xcd\x01\xe0\x02\x93\x01\xd4\x02]\x01\xbe\x02*\x01\xa2\x02\x05\x01\x8b\x02\xe4\x00s\x02\xc4\x00W\x02\xa8\x008\x02\x87\x00\x13\x02^\x00\xe6\x01\'\x00\xad\x01\xde\xfff\x01\x86\xff\x17\x01\x1c\xff\xbf\x00\xa3\xfed\x00!\xfe\x08\x00\x96\xfd\xa6\xff\x0f\xfdD\xff\x93\xfc\xe4\xfe#\xfc\x88\xfe\xc7\xfb3\xfe\x7f\xfb\xe5\xfdS\xfb\xa8\xfdC\xfb~\xfdF\xfbb\xfda\xfbZ\xfd\x88\xfbZ\xfd\xba\xfbb\xfd\xfe\xfbu\xfdH\xfc\x82\xfd\x9e\xfc\x8b\xfd\xf8\xfc\x8e\xfdR\xfd\x93\xfd\xa6\xfd\x9b\xfd\xe0\xfd\x96\xfd\x0f\xfe\x8d\xfd2\xfey\xfd?\xfeO\xfdF\xfe \xfdA\xfe\xe7\xfc5\xfe\xae\xfc3\xfe\x85\xfc;\xfep\xfcT\xfev\xfc}\xfe\x97\xfc\xb4\xfe\xd1\xfc\xfa\xfe#\xfdH\xff\x82\xfd\x9a\xff\xe8\xfd\xf0\xffP\xfeC\x00\xb7\xfe\x8c\x00\x1a\xff\xcc\x00~\xff\xff\x00\xdc\xff0\x013\x00b\x01}\x00\x8d\x01\xae\x00\xb8\x01\xdd\x00\xcb\x01\x01\x01\xba\x01\x11\x01\x9e\x01"\x01v\x01(\x01P\x01&\x015\x01%\x01#\x01%\x01\'\x013\x01:\x01G\x01\\\x01_\x01\x84\x01t\x01\xa9\x01\x82\x01\xcf\x01\x8c\x01\xe9\x01\x84\x01\xf3\x01h\x01\xe6\x01:\x01\xb9\x01\xfa\x00u\x01\xb1\x00\x0f\x01T\x00\x94\x00\xea\xff\x10\x00}\xff\x83\xff\x0b\xff\xfe\xfe\xa5\xfe\x8d\xfeP\xfe0\xfe\n\xfe\xf6\xfd\xdc\xfd\xe3\xfd\xc9\xfd\xee\xfd\xce\xfd\x13\xfe\xee\xfdI\xfe$\xfe\x8c\xfel\xfe\xe0\xfe\xbe\xfeB\xff\r\xff\xaf\xffX\xff\x1e\x00\x9d\xff~\x00\xdb\xff\xcd\x00\x13\x00\x05\x01;\x00\'\x01O\x002\x01K\x00"\x01.\x00\x06\x01\t\x00\xdd\x00\xd9\xff\xae\x00\xa1\xff\x92\x00|\xff\x87\x00j\xff\x8d\x00r\xff\xae\x00\x9b\xff\xe1\x00\xda\xff#\x01)\x00t\x01\x87\x00\xc5\x01\xe6\x00\x12\x02C\x01Y\x02\x9e\x01\x8b\x02\xec\x01\xa9\x021\x02\xb9\x02o\x02\xba\x02\x99\x02\xb3\x02\xb0\x02\xa8\x02\xba\x02\x8a\x02\xb3\x02Y\x02\xa2\x02\x15\x02\x88\x02\xbf\x01`\x02h\x014\x02\r\x01\xfd\x01\xb5\x00\xc2\x01n\x00\x93\x010\x00h\x01\x00\x00C\x01\xdd\xff$\x01\xc5\xff\x08\x01\xb3\xff\xe8\x00\x9f\xff\xb8\x00\x87\xff}\x00`\xff5\x00(\xff\xe4\xff\xdf\xfe\x8a\xff\x81\xfe!\xff\x18\xfe\xb0\xfe\xaa\xfd;\xfe;\xfd\xc4\xfd\xd4\xfcP\xfd~\xfc\xe4\xfcE\xfc\x8a\xfc(\xfc=\xfc,\xfc\x06\xfcN\xfc\xe7\xfb\x80\xfc\xdb\xfb\xbf\xfc\xe6\xfb\xff\xfc\x05\xfc@\xfd5\xfc\x83\xfdp\xfc\xcb\xfd\xad\xfc\x16\xfe\xe8\xfcc\xfe%\xfd\xb0\xfef\xfd\xf3\xfe\x9f\xfd7\xff\xd7\xfdw\xff\x03\xfe\xae\xff \xfe\xe4\xff7\xfe\x0c\x00<\xfe.\x005\xfeT\x00-\xfe\x82\x00*\xfe\xc5\x00A\xfe\x0b\x01a\xfe\\\x01\x98\xfe\xbe\x01\xf2\xfe\x14\x02R\xffe\x02\xbe\xff\xac\x021\x00\xe2\x02\x9f\x00\x0e\x03\r\x01*\x03v\x01:\x03\xda\x01J\x038\x02]\x03\x88\x02y\x03\xcb\x02\x97\x03\x02\x03\xad\x03-\x03\xb1\x03N\x03\xa7\x03i\x03\x8b\x03w\x03_\x03y\x03(\x03r\x03\xe6\x02h\x03\x9e\x02`\x03T\x02\\\x03\r\x02]\x03\xca\x01_\x03\x8a\x01^\x03P\x01Z\x03\x19\x01N\x03\xe0\x009\x03\xa0\x00\x18\x03W\x00\xec\x02\x02\x00\xb7\x02\x9d\xfft\x02+\xff&\x02\xb0\xfe\xca\x01/\xfe`\x01\xb6\xfd\xf2\x00C\xfd\x80\x00\xda\xfc\x12\x00\x85\xfc\xb0\xffD\xfcZ\xff\x1c\xfc\x13\xff\x02\xfc\xd9\xfe\xf5\xfb\xb2\xfe\xf2\xfb\xa4\xfe\xf6\xfb\xa4\xfe\x0b\xfc\xb1\xfe3\xfc\xc7\xfei\xfc\xe1\xfe\xa9\xfc\x02\xff\xec\xfc$\xff3\xfdB\xff}\xfdV\xff\xc7\xfd^\xff\x07\xfeS\xff8\xfe:\xff]\xfe\x15\xffu\xfe\xe0\xfe\x8e\xfe\xa5\xfe\xac\xfek\xfe\xd1\xfe;\xfe\x04\xff&\xfeB\xff*\xfe\x8d\xffI\xfe\xe4\xff}\xfeA\x00\xbf\xfe\xa7\x00\x11\xff\x04\x01e\xffV\x01\xbc\xff\x9e\x01\x14\x00\xd8\x01f\x00\x07\x02\xae\x00,\x02\xe9\x00'

class OpusDecoder():
    def __init__(self, sample_rate=SAMPLE_RATE, channels=CHANNELS):
        self._sample_rate = sample_rate
        self._channels = channels
        self.__c_init()

    def __c_init(self):
        error = ffi.new("int *")
        self._decoder = lib.opus_decoder_create(self.sample_rate, self.channels, error)
        if error[0] != lib.OPUS_OK:
            raise RuntimeError("Error Initializing Opus Decoder. Check Sample Rate and Channels")

    def __del__(self):
        lib.opus_decoder_destroy(self._decoder)

    def decode2(self, data: bytes, frame_size: int, decode_fec=False) -> bytes:
        pcm_size = frame_size * self.channels * ffi.sizeof("int16_t")
        pcm = ffi.new("int16_t[]", pcm_size)
        pcm_ptr = ffi.cast("int16_t *", pcm)
        data = ffi.from_buffer(data)
        decoded = lib.opus_decode(self._decoder, data, len(data), pcm_ptr, frame_size, int(decode_fec))
        if not decoded:
            raise RuntimeError("Opus decode returned 0 bytes")
        return bytes(ffi.buffer(pcm))

    def decode(self, data, frame_size=480):
        cdata = ffi.new("unsigned char []", len(data))
        cdata[0:len(data)] = data
        frame = AudioFrame(format="s16", layout="stereo", samples=frame_size)
        frame.sample_rate = self.sample_rate
        pcm_ptr = ffi.cast("int16_t *", frame.planes[0].buffer_ptr)
        decoded = lib.opus_decode(self._decoder, cdata, len(data), pcm_ptr, frame_size, 0)
        return frame.planes[0]

    @property
    def sample_rate(self) -> int:
        return self._sample_rate

    @property
    def channels(self) -> int:
        return self._channels
