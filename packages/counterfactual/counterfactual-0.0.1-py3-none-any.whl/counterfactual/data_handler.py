# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_data_handler.ipynb (unless otherwise specified).

__all__ = ["DataHandler", "get_credentials"]

# Cell
import pandas as pd
from google.cloud import bigquery

import counterfactual.constants as c

# from google.auth.transport.requests import Request
# from google.oauth2.credentials import Credentials
# from google_auth_oauthlib.flow import InstalledAppFlow


class DataHandler:
    """Common class to authenticate, connect, download and upload data to BigQuery"""

    # def __init__(self):
    #     self.creds = get_credentials(scopes=c.SCOPES)
    #     self.bq_client = bigquery.Client(project=c.PROJECT,
    #                                      credentials=self.creds
    #                                      )

    def query_data(self, sql_path=""):
        # sql_query = open(sql_path, 'r').read()
        # df = self.bq_client.query(sql_query).to_dataframe()

        # TODO: Replace with actual code to preprocess raw data
        df = pd.read_csv("./sample_data/full_conv_df.csv", parse_dates=True)

        return df

    def upload_data(
        self,
        df=pd.DataFrame(),
        destination_table="",
        write_disposition="WRITE_TRUNCATE",
    ):

        job_config = bigquery.LoadJobConfig(
            schema=[],
            write_disposition=write_disposition,
        )

        job = self.bq_client.load_table_from_dataframe(
            df, c.PROJECT + "." + c.DATASET + destination_table, job_config=job_config
        )
        job.result()

        return True


def get_credentials(scopes):
    """The file token.json stores the user's access and refresh tokens, and is
    created automatically when the authorization flow completes for the first
    time."""

    creds = None

    #     if os.path.exists(c.TOKEN_FILE):
    #         creds = Credentials.from_authorized_user_file(c.TOKEN_FILE, scopes)
    #         # If there are no (valid) credentials available, let the user log in.
    #     if not creds or not creds.valid:
    #         if creds and creds.expired and creds.refresh_token:
    #             creds.refresh(Request())
    #         else:
    #             flow = InstalledAppFlow.from_client_secrets_file(
    #                 c.CREDENTIALS_FILE, scopes)
    #             creds = flow.run_local_server(port=0)

    #         # Save the credentials for the next run
    #         with open(c.TOKEN_FILE, 'w') as token:
    #             token.write(creds.to_json())

    return creds
