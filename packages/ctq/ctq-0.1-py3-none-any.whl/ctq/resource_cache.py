from typing import Any
from typing import Optional

import cachetools


class ResourceCache(object):
    """An object which holds a common cache for objects in a recource tree to
    share and use. Designed to be a mixin class to enable caching in a resource
    tree.

    Internally ResourceCache uses ``cachetools.LRUCache``

    Attributes:

        resource_cache_max_size: An integer of thenumber of items to hold in the cache.
    """

    resource_cache_max_size: int = 10000

    def resource_cache_get(self, path_names: tuple[str]) -> Optional[Any]:
        """Returns: An object at the given path_names value

        Args:

            path_names: A tuple of strings representing the path to a resource.

        Returns:

            The the object in the cache or ``None`` if the object is not in the
            Cache

        """
        cache = self._ctq_resource_cache
        if cache is None:
            return None
        return cache.get(path_names)

    def resource_cache_set(self, path_names: tuple[str], resource: Any):
        """Save a resource for a given path_names tuple

        Args:

            path_names: A tuple of string representing the path to a resource
            this can be generated by ``ctq.resource_path_names(obj)``

            resource: An object tha should be entered into the cache.
        """

        cache = self._ctq_resource_cache
        if cache is None:
            cache = cachetools.LRUCache(maxsize=self.resource_cache_max_size)
            self._ctq_resource_cache = cache
        cache[path_names] = resource

    def resource_cache_clear(self):
        """Clear the cache."""
        self._ctq_resource_cache = None

    _ctq_resource_cache = None
