# coding: utf-8

"""
    streamduo.com API

    Swagger docs for streamduo.com  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: steve@streamduo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Client(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_description': 'str',
        'client_display_name': 'str',
        'client_id': 'str',
        'client_secret': 'str',
        'users': 'list[str]'
    }

    attribute_map = {
        'client_description': 'clientDescription',
        'client_display_name': 'clientDisplayName',
        'client_id': 'clientId',
        'client_secret': 'clientSecret',
        'users': 'users'
    }

    def __init__(self, client_description=None, client_display_name=None, client_id=None, client_secret=None, users=None):  # noqa: E501
        """Client - a model defined in Swagger"""  # noqa: E501
        self._client_description = None
        self._client_display_name = None
        self._client_id = None
        self._client_secret = None
        self._users = None
        self.discriminator = None
        if client_description is not None:
            self.client_description = client_description
        if client_display_name is not None:
            self.client_display_name = client_display_name
        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if users is not None:
            self.users = users

    @property
    def client_description(self):
        """Gets the client_description of this Client.  # noqa: E501


        :return: The client_description of this Client.  # noqa: E501
        :rtype: str
        """
        return self._client_description

    @client_description.setter
    def client_description(self, client_description):
        """Sets the client_description of this Client.


        :param client_description: The client_description of this Client.  # noqa: E501
        :type: str
        """

        self._client_description = client_description

    @property
    def client_display_name(self):
        """Gets the client_display_name of this Client.  # noqa: E501


        :return: The client_display_name of this Client.  # noqa: E501
        :rtype: str
        """
        return self._client_display_name

    @client_display_name.setter
    def client_display_name(self, client_display_name):
        """Sets the client_display_name of this Client.


        :param client_display_name: The client_display_name of this Client.  # noqa: E501
        :type: str
        """

        self._client_display_name = client_display_name

    @property
    def client_id(self):
        """Gets the client_id of this Client.  # noqa: E501


        :return: The client_id of this Client.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Client.


        :param client_id: The client_id of this Client.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this Client.  # noqa: E501


        :return: The client_secret of this Client.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this Client.


        :param client_secret: The client_secret of this Client.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def users(self):
        """Gets the users of this Client.  # noqa: E501


        :return: The users of this Client.  # noqa: E501
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Client.


        :param users: The users of this Client.  # noqa: E501
        :type: list[str]
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Client, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Client):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
