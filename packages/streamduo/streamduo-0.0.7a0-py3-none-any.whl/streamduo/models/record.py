# coding: utf-8

"""
    streamduo.com API

    Swagger docs for streamduo.com  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: steve@streamduo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Record(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_payload': 'object',
        'read_status': 'str',
        'record_id': 'str',
        'record_time_stamp_iso': 'str',
        'stream_id': 'str'
    }

    attribute_map = {
        'data_payload': 'dataPayload',
        'read_status': 'readStatus',
        'record_id': 'recordId',
        'record_time_stamp_iso': 'recordTimeStampISO',
        'stream_id': 'streamId'
    }

    def __init__(self, data_payload=None, read_status=None, record_id=None, record_time_stamp_iso=None, stream_id=None):  # noqa: E501
        """Record - a model defined in Swagger"""  # noqa: E501
        self._data_payload = None
        self._read_status = None
        self._record_id = None
        self._record_time_stamp_iso = None
        self._stream_id = None
        self.discriminator = None
        if data_payload is not None:
            self.data_payload = data_payload
        if read_status is not None:
            self.read_status = read_status
        if record_id is not None:
            self.record_id = record_id
        if record_time_stamp_iso is not None:
            self.record_time_stamp_iso = record_time_stamp_iso
        if stream_id is not None:
            self.stream_id = stream_id

    @property
    def data_payload(self):
        """Gets the data_payload of this Record.  # noqa: E501


        :return: The data_payload of this Record.  # noqa: E501
        :rtype: object
        """
        return self._data_payload

    @data_payload.setter
    def data_payload(self, data_payload):
        """Sets the data_payload of this Record.


        :param data_payload: The data_payload of this Record.  # noqa: E501
        :type: object
        """

        self._data_payload = data_payload

    @property
    def read_status(self):
        """Gets the read_status of this Record.  # noqa: E501


        :return: The read_status of this Record.  # noqa: E501
        :rtype: str
        """
        return self._read_status

    @read_status.setter
    def read_status(self, read_status):
        """Sets the read_status of this Record.


        :param read_status: The read_status of this Record.  # noqa: E501
        :type: str
        """

        self._read_status = read_status

    @property
    def record_id(self):
        """Gets the record_id of this Record.  # noqa: E501


        :return: The record_id of this Record.  # noqa: E501
        :rtype: str
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this Record.


        :param record_id: The record_id of this Record.  # noqa: E501
        :type: str
        """

        self._record_id = record_id

    @property
    def record_time_stamp_iso(self):
        """Gets the record_time_stamp_iso of this Record.  # noqa: E501


        :return: The record_time_stamp_iso of this Record.  # noqa: E501
        :rtype: str
        """
        return self._record_time_stamp_iso

    @record_time_stamp_iso.setter
    def record_time_stamp_iso(self, record_time_stamp_iso):
        """Sets the record_time_stamp_iso of this Record.


        :param record_time_stamp_iso: The record_time_stamp_iso of this Record.  # noqa: E501
        :type: str
        """

        self._record_time_stamp_iso = record_time_stamp_iso

    @property
    def stream_id(self):
        """Gets the stream_id of this Record.  # noqa: E501


        :return: The stream_id of this Record.  # noqa: E501
        :rtype: str
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this Record.


        :param stream_id: The stream_id of this Record.  # noqa: E501
        :type: str
        """

        self._stream_id = stream_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Record, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Record):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
