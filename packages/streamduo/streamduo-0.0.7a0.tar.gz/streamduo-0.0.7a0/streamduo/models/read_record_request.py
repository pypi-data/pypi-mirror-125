# coding: utf-8

"""
    streamduo.com API

    Swagger docs for streamduo.com  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: steve@streamduo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReadRecordRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mark_as_read': 'bool',
        'read_record_request_type': 'str',
        'record_count': 'int',
        'record_id': 'str',
        'record_time_stamp_iso': 'str'
    }

    attribute_map = {
        'mark_as_read': 'markAsRead',
        'read_record_request_type': 'readRecordRequestType',
        'record_count': 'recordCount',
        'record_id': 'recordId',
        'record_time_stamp_iso': 'recordTimeStampISO'
    }

    def __init__(self, mark_as_read=None, read_record_request_type=None, record_count=None, record_id=None, record_time_stamp_iso=None):  # noqa: E501
        """ReadRecordRequest - a model defined in Swagger"""  # noqa: E501
        self._mark_as_read = None
        self._read_record_request_type = None
        self._record_count = None
        self._record_id = None
        self._record_time_stamp_iso = None
        self.discriminator = None
        if mark_as_read is not None:
            self.mark_as_read = mark_as_read
        if read_record_request_type is not None:
            self.read_record_request_type = read_record_request_type
        if record_count is not None:
            self.record_count = record_count
        if record_id is not None:
            self.record_id = record_id
        if record_time_stamp_iso is not None:
            self.record_time_stamp_iso = record_time_stamp_iso

    @property
    def mark_as_read(self):
        """Gets the mark_as_read of this ReadRecordRequest.  # noqa: E501


        :return: The mark_as_read of this ReadRecordRequest.  # noqa: E501
        :rtype: bool
        """
        return self._mark_as_read

    @mark_as_read.setter
    def mark_as_read(self, mark_as_read):
        """Sets the mark_as_read of this ReadRecordRequest.


        :param mark_as_read: The mark_as_read of this ReadRecordRequest.  # noqa: E501
        :type: bool
        """

        self._mark_as_read = mark_as_read

    @property
    def read_record_request_type(self):
        """Gets the read_record_request_type of this ReadRecordRequest.  # noqa: E501


        :return: The read_record_request_type of this ReadRecordRequest.  # noqa: E501
        :rtype: str
        """
        return self._read_record_request_type

    @read_record_request_type.setter
    def read_record_request_type(self, read_record_request_type):
        """Sets the read_record_request_type of this ReadRecordRequest.


        :param read_record_request_type: The read_record_request_type of this ReadRecordRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["SAMPLE", "UNREAD", "READ_SINCE_RECORD_ID", "READ_SINCE_TIMESTAMP", "SINGLE", "LAST_N"]  # noqa: E501
        if read_record_request_type not in allowed_values:
            raise ValueError(
                "Invalid value for `read_record_request_type` ({0}), must be one of {1}"  # noqa: E501
                .format(read_record_request_type, allowed_values)
            )

        self._read_record_request_type = read_record_request_type

    @property
    def record_count(self):
        """Gets the record_count of this ReadRecordRequest.  # noqa: E501


        :return: The record_count of this ReadRecordRequest.  # noqa: E501
        :rtype: int
        """
        return self._record_count

    @record_count.setter
    def record_count(self, record_count):
        """Sets the record_count of this ReadRecordRequest.


        :param record_count: The record_count of this ReadRecordRequest.  # noqa: E501
        :type: int
        """

        self._record_count = record_count

    @property
    def record_id(self):
        """Gets the record_id of this ReadRecordRequest.  # noqa: E501


        :return: The record_id of this ReadRecordRequest.  # noqa: E501
        :rtype: str
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this ReadRecordRequest.


        :param record_id: The record_id of this ReadRecordRequest.  # noqa: E501
        :type: str
        """

        self._record_id = record_id

    @property
    def record_time_stamp_iso(self):
        """Gets the record_time_stamp_iso of this ReadRecordRequest.  # noqa: E501


        :return: The record_time_stamp_iso of this ReadRecordRequest.  # noqa: E501
        :rtype: str
        """
        return self._record_time_stamp_iso

    @record_time_stamp_iso.setter
    def record_time_stamp_iso(self, record_time_stamp_iso):
        """Sets the record_time_stamp_iso of this ReadRecordRequest.


        :param record_time_stamp_iso: The record_time_stamp_iso of this ReadRecordRequest.  # noqa: E501
        :type: str
        """

        self._record_time_stamp_iso = record_time_stamp_iso

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReadRecordRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReadRecordRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
