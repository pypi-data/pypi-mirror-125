# coding: utf-8

"""
    streamduo.com API

    Swagger docs for streamduo.com  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: steve@streamduo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Stream(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consumer_organization': 'str',
        'consumer_organization_id': 'str',
        'created_by_user': 'str',
        'display_name': 'str',
        'producer_organization': 'str',
        'producer_organization_id': 'str',
        'records_per_day': 'str',
        'stream_actor_permission_records': 'list[StreamActorPermissionRecord]',
        'stream_id': 'str',
        'unread_records_count': 'str'
    }

    attribute_map = {
        'consumer_organization': 'consumerOrganization',
        'consumer_organization_id': 'consumerOrganizationId',
        'created_by_user': 'createdByUser',
        'display_name': 'displayName',
        'producer_organization': 'producerOrganization',
        'producer_organization_id': 'producerOrganizationId',
        'records_per_day': 'recordsPerDay',
        'stream_actor_permission_records': 'streamActorPermissionRecords',
        'stream_id': 'streamId',
        'unread_records_count': 'unreadRecordsCount'
    }

    def __init__(self, consumer_organization=None, consumer_organization_id=None, created_by_user=None, display_name=None, producer_organization=None, producer_organization_id=None, records_per_day=None, stream_actor_permission_records=None, stream_id=None, unread_records_count=None):  # noqa: E501
        """Stream - a model defined in Swagger"""  # noqa: E501
        self._consumer_organization = None
        self._consumer_organization_id = None
        self._created_by_user = None
        self._display_name = None
        self._producer_organization = None
        self._producer_organization_id = None
        self._records_per_day = None
        self._stream_actor_permission_records = None
        self._stream_id = None
        self._unread_records_count = None
        self.discriminator = None
        if consumer_organization is not None:
            self.consumer_organization = consumer_organization
        if consumer_organization_id is not None:
            self.consumer_organization_id = consumer_organization_id
        if created_by_user is not None:
            self.created_by_user = created_by_user
        if display_name is not None:
            self.display_name = display_name
        if producer_organization is not None:
            self.producer_organization = producer_organization
        if producer_organization_id is not None:
            self.producer_organization_id = producer_organization_id
        if records_per_day is not None:
            self.records_per_day = records_per_day
        if stream_actor_permission_records is not None:
            self.stream_actor_permission_records = stream_actor_permission_records
        if stream_id is not None:
            self.stream_id = stream_id
        if unread_records_count is not None:
            self.unread_records_count = unread_records_count

    @property
    def consumer_organization(self):
        """Gets the consumer_organization of this Stream.  # noqa: E501


        :return: The consumer_organization of this Stream.  # noqa: E501
        :rtype: str
        """
        return self._consumer_organization

    @consumer_organization.setter
    def consumer_organization(self, consumer_organization):
        """Sets the consumer_organization of this Stream.


        :param consumer_organization: The consumer_organization of this Stream.  # noqa: E501
        :type: str
        """

        self._consumer_organization = consumer_organization

    @property
    def consumer_organization_id(self):
        """Gets the consumer_organization_id of this Stream.  # noqa: E501


        :return: The consumer_organization_id of this Stream.  # noqa: E501
        :rtype: str
        """
        return self._consumer_organization_id

    @consumer_organization_id.setter
    def consumer_organization_id(self, consumer_organization_id):
        """Sets the consumer_organization_id of this Stream.


        :param consumer_organization_id: The consumer_organization_id of this Stream.  # noqa: E501
        :type: str
        """

        self._consumer_organization_id = consumer_organization_id

    @property
    def created_by_user(self):
        """Gets the created_by_user of this Stream.  # noqa: E501


        :return: The created_by_user of this Stream.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this Stream.


        :param created_by_user: The created_by_user of this Stream.  # noqa: E501
        :type: str
        """

        self._created_by_user = created_by_user

    @property
    def display_name(self):
        """Gets the display_name of this Stream.  # noqa: E501


        :return: The display_name of this Stream.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Stream.


        :param display_name: The display_name of this Stream.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def producer_organization(self):
        """Gets the producer_organization of this Stream.  # noqa: E501


        :return: The producer_organization of this Stream.  # noqa: E501
        :rtype: str
        """
        return self._producer_organization

    @producer_organization.setter
    def producer_organization(self, producer_organization):
        """Sets the producer_organization of this Stream.


        :param producer_organization: The producer_organization of this Stream.  # noqa: E501
        :type: str
        """

        self._producer_organization = producer_organization

    @property
    def producer_organization_id(self):
        """Gets the producer_organization_id of this Stream.  # noqa: E501


        :return: The producer_organization_id of this Stream.  # noqa: E501
        :rtype: str
        """
        return self._producer_organization_id

    @producer_organization_id.setter
    def producer_organization_id(self, producer_organization_id):
        """Sets the producer_organization_id of this Stream.


        :param producer_organization_id: The producer_organization_id of this Stream.  # noqa: E501
        :type: str
        """

        self._producer_organization_id = producer_organization_id

    @property
    def records_per_day(self):
        """Gets the records_per_day of this Stream.  # noqa: E501


        :return: The records_per_day of this Stream.  # noqa: E501
        :rtype: str
        """
        return self._records_per_day

    @records_per_day.setter
    def records_per_day(self, records_per_day):
        """Sets the records_per_day of this Stream.


        :param records_per_day: The records_per_day of this Stream.  # noqa: E501
        :type: str
        """

        self._records_per_day = records_per_day

    @property
    def stream_actor_permission_records(self):
        """Gets the stream_actor_permission_records of this Stream.  # noqa: E501


        :return: The stream_actor_permission_records of this Stream.  # noqa: E501
        :rtype: list[StreamActorPermissionRecord]
        """
        return self._stream_actor_permission_records

    @stream_actor_permission_records.setter
    def stream_actor_permission_records(self, stream_actor_permission_records):
        """Sets the stream_actor_permission_records of this Stream.


        :param stream_actor_permission_records: The stream_actor_permission_records of this Stream.  # noqa: E501
        :type: list[StreamActorPermissionRecord]
        """

        self._stream_actor_permission_records = stream_actor_permission_records

    @property
    def stream_id(self):
        """Gets the stream_id of this Stream.  # noqa: E501


        :return: The stream_id of this Stream.  # noqa: E501
        :rtype: str
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this Stream.


        :param stream_id: The stream_id of this Stream.  # noqa: E501
        :type: str
        """

        self._stream_id = stream_id

    @property
    def unread_records_count(self):
        """Gets the unread_records_count of this Stream.  # noqa: E501


        :return: The unread_records_count of this Stream.  # noqa: E501
        :rtype: str
        """
        return self._unread_records_count

    @unread_records_count.setter
    def unread_records_count(self, unread_records_count):
        """Sets the unread_records_count of this Stream.


        :param unread_records_count: The unread_records_count of this Stream.  # noqa: E501
        :type: str
        """

        self._unread_records_count = unread_records_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Stream, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stream):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
