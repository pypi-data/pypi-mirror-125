# coding: utf-8

"""
    streamduo.com API

    Swagger docs for streamduo.com  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: steve@streamduo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StreamActorPermissionRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actor_display_name': 'str',
        'actor_id': 'str',
        'actor_type': 'str',
        'is_consumer': 'bool',
        'is_producer': 'bool'
    }

    attribute_map = {
        'actor_display_name': 'actorDisplayName',
        'actor_id': 'actorId',
        'actor_type': 'actorType',
        'is_consumer': 'isConsumer',
        'is_producer': 'isProducer'
    }

    def __init__(self, actor_display_name=None, actor_id=None, actor_type=None, is_consumer=None, is_producer=None):  # noqa: E501
        """StreamActorPermissionRecord - a model defined in Swagger"""  # noqa: E501
        self._actor_display_name = None
        self._actor_id = None
        self._actor_type = None
        self._is_consumer = None
        self._is_producer = None
        self.discriminator = None
        if actor_display_name is not None:
            self.actor_display_name = actor_display_name
        if actor_id is not None:
            self.actor_id = actor_id
        if actor_type is not None:
            self.actor_type = actor_type
        if is_consumer is not None:
            self.is_consumer = is_consumer
        if is_producer is not None:
            self.is_producer = is_producer

    @property
    def actor_display_name(self):
        """Gets the actor_display_name of this StreamActorPermissionRecord.  # noqa: E501


        :return: The actor_display_name of this StreamActorPermissionRecord.  # noqa: E501
        :rtype: str
        """
        return self._actor_display_name

    @actor_display_name.setter
    def actor_display_name(self, actor_display_name):
        """Sets the actor_display_name of this StreamActorPermissionRecord.


        :param actor_display_name: The actor_display_name of this StreamActorPermissionRecord.  # noqa: E501
        :type: str
        """

        self._actor_display_name = actor_display_name

    @property
    def actor_id(self):
        """Gets the actor_id of this StreamActorPermissionRecord.  # noqa: E501


        :return: The actor_id of this StreamActorPermissionRecord.  # noqa: E501
        :rtype: str
        """
        return self._actor_id

    @actor_id.setter
    def actor_id(self, actor_id):
        """Sets the actor_id of this StreamActorPermissionRecord.


        :param actor_id: The actor_id of this StreamActorPermissionRecord.  # noqa: E501
        :type: str
        """

        self._actor_id = actor_id

    @property
    def actor_type(self):
        """Gets the actor_type of this StreamActorPermissionRecord.  # noqa: E501


        :return: The actor_type of this StreamActorPermissionRecord.  # noqa: E501
        :rtype: str
        """
        return self._actor_type

    @actor_type.setter
    def actor_type(self, actor_type):
        """Sets the actor_type of this StreamActorPermissionRecord.


        :param actor_type: The actor_type of this StreamActorPermissionRecord.  # noqa: E501
        :type: str
        """
        allowed_values = ["USER", "CLIENT"]  # noqa: E501
        if actor_type not in allowed_values:
            raise ValueError(
                "Invalid value for `actor_type` ({0}), must be one of {1}"  # noqa: E501
                .format(actor_type, allowed_values)
            )

        self._actor_type = actor_type

    @property
    def is_consumer(self):
        """Gets the is_consumer of this StreamActorPermissionRecord.  # noqa: E501


        :return: The is_consumer of this StreamActorPermissionRecord.  # noqa: E501
        :rtype: bool
        """
        return self._is_consumer

    @is_consumer.setter
    def is_consumer(self, is_consumer):
        """Sets the is_consumer of this StreamActorPermissionRecord.


        :param is_consumer: The is_consumer of this StreamActorPermissionRecord.  # noqa: E501
        :type: bool
        """

        self._is_consumer = is_consumer

    @property
    def is_producer(self):
        """Gets the is_producer of this StreamActorPermissionRecord.  # noqa: E501


        :return: The is_producer of this StreamActorPermissionRecord.  # noqa: E501
        :rtype: bool
        """
        return self._is_producer

    @is_producer.setter
    def is_producer(self, is_producer):
        """Sets the is_producer of this StreamActorPermissionRecord.


        :param is_producer: The is_producer of this StreamActorPermissionRecord.  # noqa: E501
        :type: bool
        """

        self._is_producer = is_producer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StreamActorPermissionRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StreamActorPermissionRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
