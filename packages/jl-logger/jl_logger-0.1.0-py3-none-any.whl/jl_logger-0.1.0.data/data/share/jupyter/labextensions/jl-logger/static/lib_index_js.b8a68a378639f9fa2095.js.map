{"version":3,"file":"lib_index_js.b8a68a378639f9fa2095.js","mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AClCqD;AACE;AACC;AACjB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAU;AACtC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mEAAmE,WAAW,KAAK,OAAO;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,iEAAe,QAAQ,EAAC","sources":["webpack://jl-logger/./lib/handler.js","webpack://jl-logger/./lib/index.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jl-logger', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { ToolbarButton } from '@jupyterlab/apputils';\nimport { NotebookActions } from '@jupyterlab/notebook';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { requestAPI } from './handler';\nconst jlLoggerToolbarItemClassName = 'jl-logger-tools';\nconst activeJlLoggerBtnClassName = 'activated-jl-logger-btn';\n/**\n * The plugin registration information.\n */\nconst jlLogger = {\n    id: 'jl-logger',\n    autoStart: true,\n    activate: (app) => {\n        app.docRegistry.addWidgetExtension('Notebook', new ButtonExtension);\n    }\n};\nexport class ButtonExtension {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        /**\n         * Append hidden element for determining activity of jl-logger.\n         * @param notebookId\n         */\n        const appendJlLoggerHiddenElem = (notebookId) => {\n            const e = document.createElement('input');\n            e.setAttribute('type', 'hidden');\n            e.id = 'jl-logger-' + notebookId;\n            e.value = '0';\n            document.body.appendChild(e);\n        };\n        /**\n         * Append text input and checkbox next to the jl-logger button\n         * @param elem\n         * @param targetNotebookId\n         */\n        const appendToolbarItems = (elem, targetNotebookId) => {\n            var _a;\n            const parentSpanElem = document.createElement('span');\n            parentSpanElem.className = jlLoggerToolbarItemClassName;\n            const textInputElem = document.createElement('input');\n            textInputElem.setAttribute('type', 'text');\n            parentSpanElem.appendChild(textInputElem);\n            const extSpanElem = document.createElement('span');\n            extSpanElem.textContent = '.log';\n            extSpanElem.className = 'ext-txt';\n            parentSpanElem.append(extSpanElem);\n            const wandbLabelElem = document.createElement('label');\n            wandbLabelElem.textContent = 'W&B';\n            wandbLabelElem.setAttribute('for', 'use-wandb-' + targetNotebookId);\n            parentSpanElem.append(wandbLabelElem);\n            const checkBoxElem = document.createElement('input');\n            checkBoxElem.setAttribute('type', 'checkbox');\n            checkBoxElem.id = 'use-wandb-' + targetNotebookId;\n            parentSpanElem.appendChild(checkBoxElem);\n            (_a = elem.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(parentSpanElem, elem.nextSibling);\n        };\n        /**\n         * switch activation of logger\n         */\n        const toggleActivation = () => {\n            var _a, _b, _c, _d;\n            const e = window.event;\n            const targetNotebookId = document.getElementsByClassName('jp-mod-current')[0].getAttribute('data-id');\n            let jlLoggerActivationElem = document.getElementById('jl-logger-' + targetNotebookId);\n            if (jlLoggerActivationElem === null) {\n                appendJlLoggerHiddenElem(targetNotebookId);\n            }\n            if (e !== undefined) {\n                let elem = e.target;\n                elem = (_c = (_b = (_a = elem.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.parentElement) === null || _c === void 0 ? void 0 : _c.getElementsByClassName('jl-logger-btn')[0].parentElement;\n                elem.classList.toggle(activeJlLoggerBtnClassName);\n                if (elem.classList.contains(activeJlLoggerBtnClassName)) {\n                    appendToolbarItems(elem, targetNotebookId);\n                    document.getElementById('jl-logger-' + targetNotebookId).value = '1';\n                }\n                else {\n                    (_d = elem.parentElement) === null || _d === void 0 ? void 0 : _d.getElementsByClassName(jlLoggerToolbarItemClassName)[0].remove();\n                    document.getElementById('jl-logger-' + targetNotebookId).value = '0';\n                }\n            }\n        };\n        const button = new ToolbarButton({\n            className: 'jl-logger-btn',\n            label: 'Logger',\n            onClick: toggleActivation,\n            tooltip: 'Activate jl-logger',\n        });\n        panel.toolbar.insertItem(10, 'jl-logger', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\n/**\n * Post request for logging.\n * @param logContents\n * @param filename\n */\nconst postLog = async (logContents, filename) => {\n    const dataToSend = {\n        logContent: logContents,\n        filename: filename\n    };\n    try {\n        const reply = await requestAPI('LogOutputContent', {\n            body: JSON.stringify(dataToSend),\n            method: 'POST'\n        });\n        console.info(reply);\n    }\n    catch (reason) {\n        console.error(`Error on POST /jl-logger/LogOutputContent ${dataToSend}.\\n${reason}`);\n    }\n};\n/**\n * Get string of current time.\n */\nconst getNowYMDhmsStr = () => {\n    const date = new Date();\n    const Y = date.getFullYear();\n    const M = (\"00\" + (date.getMonth() + 1)).slice(-2);\n    const D = (\"00\" + date.getDate()).slice(-2);\n    const h = (\"00\" + date.getHours()).slice(-2);\n    const m = (\"00\" + date.getMinutes()).slice(-2);\n    return Y + M + D + h + m;\n};\n/**\n * Get content in output cells from OutputArea\n * @param outputArea\n * @returns\n */\nconst getOutputContents = (outputArea) => {\n    const outputJSONArray = outputArea.model.toJSON();\n    return outputJSONArray.map((v) => {\n        let outputType = v.output_type;\n        let logContent = '';\n        switch (outputType) {\n            case 'stream':\n                logContent = '[' + outputType + ']' + '\\n' + v.text;\n                break;\n            case 'execute_result':\n                let data = v.data;\n                let key = 'text/plain';\n                if (Object.keys(data).includes(key)) {\n                    logContent = '[' + outputType + ']' + '\\n' + data[key] + '\\n';\n                }\n                break;\n            case 'error':\n                logContent = '[' + outputType + ']' + '\\n' + v.evalue + '\\n';\n                break;\n        }\n        return logContent;\n    });\n};\n/**\n * Extract wandb run name from OutputArea\n * @param outputArea\n * @returns\n */\nconst extractWandbRunName = (outputArea) => {\n    const outputJSONArray = outputArea.model.toJSON();\n    let runName = '';\n    let re = /(?<=<strong><a href=\"https:\\/\\/wandb\\.ai\\/.*>).*(?=.*<\\/a><\\/strong>)/;\n    for (let v of outputJSONArray) {\n        if (v.output_type === 'display_data') {\n            let data = v.data;\n            let key = 'text/html';\n            if (Object.keys(data).includes(key)) {\n                let res = re.exec(data[key]);\n                if (res !== null) {\n                    for (let s of res) {\n                        runName = s;\n                    }\n                }\n            }\n        }\n    }\n    return runName;\n};\nNotebookActions.executed.connect((_, action) => {\n    const targetOutputArea = action.cell.outputArea;\n    const outputContents = getOutputContents(targetOutputArea);\n    const targetNotebookId = document.getElementsByClassName('jp-mod-current')[0].getAttribute('data-id');\n    const targetNotbeoolElem = document.getElementById(targetNotebookId);\n    const activeFlagElem = document.getElementById('jl-logger-' + targetNotebookId);\n    if (activeFlagElem !== null && activeFlagElem.value === '1') {\n        let specifiedFileName = targetNotbeoolElem.getElementsByClassName(jlLoggerToolbarItemClassName)[0].getElementsByTagName('input')[0].value;\n        if (specifiedFileName === '' || specifiedFileName === null || specifiedFileName === undefined) {\n            if (document.getElementById('use-wandb-' + targetNotebookId).checked) {\n                const runName = extractWandbRunName(targetOutputArea);\n                if (runName === null) {\n                    specifiedFileName = getNowYMDhmsStr();\n                }\n                else {\n                    targetNotbeoolElem.getElementsByClassName(jlLoggerToolbarItemClassName)[0].getElementsByTagName('input')[0].value = runName;\n                    specifiedFileName = runName;\n                }\n            }\n            else {\n                specifiedFileName = getNowYMDhmsStr();\n            }\n        }\n        postLog(outputContents, specifiedFileName);\n    }\n});\nexport default jlLogger;\n"],"names":[],"sourceRoot":""}