from .path_checker import PathChecker


class ReactivePathChecker(PathChecker):
	"""
	This subclass of PathChecker provides methods to react to invalid paths by
	warning the user or making a correct path. It requires the name of the
	checked path argument to make error messages.
	"""

	def __init__(self, a_path, extension, arg_name):
		"""
		The constructor needs a file path, the expected extension and the name
		of the argument whose value is the checked path. If a_path is a string,
		it will be converted to a pathlib.Path object. If it is of type
		pathlib.Path, the instance will store its reference. The expected
		extension must start with a '.'.

		Args:
			a_path (pathlib.Path or str): the path that this instance will
				check
			extension (str): the extension that the path is supposed to have.
				If the path is not supposed to have an extension, set this
				argument to an empty string.
			arg_name (str): the name of the argument whose value is the
				checked path

		Raises:
			TypeError: if a_path is not an instance of str or pathlib.Path
		"""
		PathChecker.__init__(self, a_path, extension)
		self._arg_name = arg_name

	def __eq__(self, other):
		return PathChecker.__eq__(self, other)\
			and self._arg_name == other._arg_name

	def __repr__(self):
		return self.__class__.__name__ + "('" + str(self._path) + "', '"\
			+ self._extension + "', '" + self._arg_name + "')"

	@property
	def arg_name(self):
		"""
		This read-only property is the name (str) of the function or script
		argument whose value is property path. It is found in the error
		messages generated by this class.
		"""
		return self._arg_name

	def check_extension_correct(self):
		"""
		If path's extension does not match property extension, this method
		raises a ValueError.

		Raises:
			ValueError: if self.extension_is_correct() returns False
		"""
		if not self.extension_is_correct():
			raise ValueError(self._arg_name
				+ " must be the path to a file with the extension '"
				+ self._extension + "'.")

	def check_path_exists(self):
		"""
		If path does not exist, this method raises a FileNotFoundError.

		Raises:
			FileNotFoundError: if self.path_exists() returns False
		"""
		if not self.path_exists():
			raise FileNotFoundError(self._arg_name + ": "
				+ str(self._path) + " does not exist.")

	def check_path_is_dir(self):
		"""
		If path does not point to a directory or does not exist, this method
		raises a ValueError.

		Raises:
			ValueError: if self.path_is_dir() returns False
		"""
		if not self.path_is_dir():
			raise ValueError(
				self._arg_name + " must be the path to a directory.")

	def check_path_is_file(self):
		"""
		If path does not point to a file or does not exist, this method raises
		a ValueError.

		Raises:
			ValueError: if self.path_is_file() returns False
		"""
		if not self.path_is_file():
			raise ValueError(self._arg_name + " must be the path to a file.")

	def name_with_correct_exten(self):
		"""
		Creates a file name by appending the expected extension to path's stem.

		Returns:
			str: path's file name with the expected extension
		"""
		return self.get_file_stem() + self._extension

	def path_with_correct_exten(self):
		"""
		Creates a file path by replacing path's extension with property
		extension.

		Returns:
			pathlib.Path: a path identical to property path, but with the
				expected extension
		"""
		return self._path.parents[0]/self.name_with_correct_exten()
