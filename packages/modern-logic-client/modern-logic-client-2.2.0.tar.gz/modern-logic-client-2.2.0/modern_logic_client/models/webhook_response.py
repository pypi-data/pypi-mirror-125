# coding: utf-8

"""
    Modern Logic Api

    Manage and version your customer decision logic outside of your codebase  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@usemodernlogic.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebhookResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'webhook_id': 'int',
        'workflow_id': 'int',
        'workflow_version': 'int',
        'execution_id': 'int',
        'customer_id': 'int',
        'customer_url': 'str',
        'alert_id': 'int',
        'description': 'str',
        'event': 'str',
        'event_metadata': 'object'
    }

    attribute_map = {
        'webhook_id': 'webhookId',
        'workflow_id': 'workflowId',
        'workflow_version': 'workflowVersion',
        'execution_id': 'executionId',
        'customer_id': 'customerId',
        'customer_url': 'customerUrl',
        'alert_id': 'alertId',
        'description': 'description',
        'event': 'event',
        'event_metadata': 'event_metadata'
    }

    def __init__(self, webhook_id=None, workflow_id=None, workflow_version=None, execution_id=None, customer_id=None, customer_url=None, alert_id=None, description=None, event=None, event_metadata=None):  # noqa: E501
        """WebhookResponse - a model defined in Swagger"""  # noqa: E501
        self._webhook_id = None
        self._workflow_id = None
        self._workflow_version = None
        self._execution_id = None
        self._customer_id = None
        self._customer_url = None
        self._alert_id = None
        self._description = None
        self._event = None
        self._event_metadata = None
        self.discriminator = None
        if webhook_id is not None:
            self.webhook_id = webhook_id
        if workflow_id is not None:
            self.workflow_id = workflow_id
        if workflow_version is not None:
            self.workflow_version = workflow_version
        if execution_id is not None:
            self.execution_id = execution_id
        if customer_id is not None:
            self.customer_id = customer_id
        if customer_url is not None:
            self.customer_url = customer_url
        if alert_id is not None:
            self.alert_id = alert_id
        if description is not None:
            self.description = description
        if event is not None:
            self.event = event
        if event_metadata is not None:
            self.event_metadata = event_metadata

    @property
    def webhook_id(self):
        """Gets the webhook_id of this WebhookResponse.  # noqa: E501


        :return: The webhook_id of this WebhookResponse.  # noqa: E501
        :rtype: int
        """
        return self._webhook_id

    @webhook_id.setter
    def webhook_id(self, webhook_id):
        """Sets the webhook_id of this WebhookResponse.


        :param webhook_id: The webhook_id of this WebhookResponse.  # noqa: E501
        :type: int
        """

        self._webhook_id = webhook_id

    @property
    def workflow_id(self):
        """Gets the workflow_id of this WebhookResponse.  # noqa: E501


        :return: The workflow_id of this WebhookResponse.  # noqa: E501
        :rtype: int
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this WebhookResponse.


        :param workflow_id: The workflow_id of this WebhookResponse.  # noqa: E501
        :type: int
        """

        self._workflow_id = workflow_id

    @property
    def workflow_version(self):
        """Gets the workflow_version of this WebhookResponse.  # noqa: E501


        :return: The workflow_version of this WebhookResponse.  # noqa: E501
        :rtype: int
        """
        return self._workflow_version

    @workflow_version.setter
    def workflow_version(self, workflow_version):
        """Sets the workflow_version of this WebhookResponse.


        :param workflow_version: The workflow_version of this WebhookResponse.  # noqa: E501
        :type: int
        """

        self._workflow_version = workflow_version

    @property
    def execution_id(self):
        """Gets the execution_id of this WebhookResponse.  # noqa: E501


        :return: The execution_id of this WebhookResponse.  # noqa: E501
        :rtype: int
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this WebhookResponse.


        :param execution_id: The execution_id of this WebhookResponse.  # noqa: E501
        :type: int
        """

        self._execution_id = execution_id

    @property
    def customer_id(self):
        """Gets the customer_id of this WebhookResponse.  # noqa: E501


        :return: The customer_id of this WebhookResponse.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this WebhookResponse.


        :param customer_id: The customer_id of this WebhookResponse.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def customer_url(self):
        """Gets the customer_url of this WebhookResponse.  # noqa: E501


        :return: The customer_url of this WebhookResponse.  # noqa: E501
        :rtype: str
        """
        return self._customer_url

    @customer_url.setter
    def customer_url(self, customer_url):
        """Sets the customer_url of this WebhookResponse.


        :param customer_url: The customer_url of this WebhookResponse.  # noqa: E501
        :type: str
        """

        self._customer_url = customer_url

    @property
    def alert_id(self):
        """Gets the alert_id of this WebhookResponse.  # noqa: E501


        :return: The alert_id of this WebhookResponse.  # noqa: E501
        :rtype: int
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this WebhookResponse.


        :param alert_id: The alert_id of this WebhookResponse.  # noqa: E501
        :type: int
        """

        self._alert_id = alert_id

    @property
    def description(self):
        """Gets the description of this WebhookResponse.  # noqa: E501


        :return: The description of this WebhookResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WebhookResponse.


        :param description: The description of this WebhookResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def event(self):
        """Gets the event of this WebhookResponse.  # noqa: E501


        :return: The event of this WebhookResponse.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this WebhookResponse.


        :param event: The event of this WebhookResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["WORKFLOW_EXECUTED", "CUSTOMER_STATUS_CHANGED", "ALERT_STATUS_CHANGED"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"  # noqa: E501
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def event_metadata(self):
        """Gets the event_metadata of this WebhookResponse.  # noqa: E501


        :return: The event_metadata of this WebhookResponse.  # noqa: E501
        :rtype: object
        """
        return self._event_metadata

    @event_metadata.setter
    def event_metadata(self, event_metadata):
        """Sets the event_metadata of this WebhookResponse.


        :param event_metadata: The event_metadata of this WebhookResponse.  # noqa: E501
        :type: object
        """

        self._event_metadata = event_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
