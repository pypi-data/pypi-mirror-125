#!python
# This file is placed in the Public Domain.

import os, sys ; sys.path.insert(0, os.getcwd())

import os
import readline
import sys
import termios
import threading
import time

from gcd.clt import Client
from gcd.irc import Cfg
from gcd.obj import Object, keys, setwd
from gcd.ofn import fmt
from gcd.run import Runtime
from gcd.tbl import Table
from gcd.tms import elapsed
from gcd.run import Cfg as RunCfg
from gcd.utl import spl
from gcd.ver import __version__

setwd(os.path.expanduser("~/.genocide"))

import gcd.irc

gcd.irc.Cfg.realname = "EM_T04_OTP-CR-117_19"
gcd.irc.Cfg.username = "genocide"
gcd.irc.Cfg.channel = "#genocide"
gcd.irc.Cfg.nick = "genocide"
gcd.irc.Cfg.server = "localhost"

class Console(Client):

    def handle(self, clt, e):
        k.put(e)
        e.wait()

    def poll(self):
        return input("> ")

    def raw(self, txt):
        print(txt)
        sys.stdout.flush()


class Kernel(Runtime):

    @staticmethod
    def error(txt):
        print(txt)
        sys.stdout.flush()

    @staticmethod
    def log(txt):
        if "PONG" in txt or "PING" in txt:
            return
        if RunCfg.verbose:
            print(txt.rstrip())
            sys.stdout.flush()

def daemon():
    pid = os.fork()
    if pid != 0:
        termreset()
        os._exit(0)
    os.setsid()
    os.umask(0)
    si = open("/dev/null", 'r')
    so = open("/dev/null", 'a+')
    se = open("/dev/null", 'a+')
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())


clt = Console()
k = Kernel()

import gcd.all
import genocide.all

def wrap(func):
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    try:
        func()
    except KeyboardInterrupt:
        print("")
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)


def cmd(event):
    event.reply(",".join(sorted(list(Table.modnames))))


def main():
    if k.root():
        print("don't run this bot as root")
        return
    Table.add(cmd)
    RunCfg.name = "genocide"
    RunCfg.version = __version__
    k.parse_cli()
    if RunCfg.verbose:
        k.log("GENOCIDE %s starting at %s" % (__version__, time.ctime(time.time())))
        k.log(fmt(RunCfg))
    if k.prs.txt:
        return k.cmd(clt, k.prs.otxt)
    if RunCfg.daemon:
        daemon()
    if RunCfg.console:
        k.start()
        for mn in spl(RunCfg.mods):
            k.init(mn)
        k.log(",".join(sorted(list(Table.modnames))))
        clt.start()
        k.wait()

wrap(main)
