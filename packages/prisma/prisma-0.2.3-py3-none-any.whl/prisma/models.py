# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pylint: disable=all
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
import sys
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Callable,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)

if sys.version_info >= (3, 9):
    from typing import TypedDict, Literal
else:
    from typing_extensions import TypedDict, Literal

# -- template models.py.jinja --
import os
from pydantic import BaseConfig, BaseModel, Field

from . import types, enums, errors, fields
from ._types import BaseModelT
from .generator import partial_models_ctx, PartialModelField


class Config(BaseConfig):
    use_enum_values: bool = True
    allow_population_by_field_name: bool = True


_created_partial_types: Set[str] = set()


class Url(BaseModel):
    id: int
    created: datetime.datetime
    original: str
    clicks: int

    Config = Config

    @classmethod
    def prisma(cls: Type[BaseModelT]) -> 'actions.UrlActions[BaseModelT]':
        from .client import get_client

        return actions.UrlActions[BaseModelT](get_client(), cls)

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.UrlKeys']] = None,
        exclude: Optional[Iterable['types.UrlKeys']] = None,
        required: Optional[Iterable['types.UrlKeys']] = None,
        optional: Optional[Iterable['types.UrlKeys']] = None,
        relations: Optional[Mapping['types.UrlRelationalFieldKeys', str]] = None,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None and exclude is not None:
            raise TypeError(f'Exclude and include are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        fields: Dict['types.UrlKeys', PartialModelField] = {}

        try:
            if include:
                for field in include:
                    fields[field] = _Url_fields[field]
            elif exclude:
                for field in exclude:
                    if field not in _Url_fields:
                        raise KeyError(field)

                fields = {
                    key: data
                    for key, data in _Url_fields.items()
                    if key not in exclude
                }
            else:
                fields = _Url_fields.copy()

            if required:
                for field in required:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = True

            if relations:
                raise ValueError('Model: "Url" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Url / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)



_Url_relational_fields: Set[str] = set()  # pyright: reportUnusedVariable=false
_Url_fields: Dict['types.UrlKeys', PartialModelField] = {
    'id': {
        'name': 'id',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
    'created': {
        'name': 'created',
        'is_list': False,
        'optional': False,
        'type': 'datetime.datetime',
    },
    'original': {
        'name': 'original',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'clicks': {
        'name': 'clicks',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
}



# we have to import ourselves as relation types are namespaced to models
# e.g. models.Post
from . import models, actions

# required to support relationships between models
Url.update_forward_refs()
