# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pylint: disable=all
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
import sys
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Callable,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)

if sys.version_info >= (3, 9):
    from typing import TypedDict, Literal
else:
    from typing_extensions import TypedDict, Literal

# -- template types.py.jinja --
from .utils import _NoneType



# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                    },
    total=False,
)

    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


BigIntFilter = IntFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)

# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput


# Url types

class UrlOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Url create method"""
    id: int
    created: datetime.datetime
    clicks: int


class UrlCreateInput(UrlOptionalCreateInput):
    """Required arguments to the Url create method"""
    original: str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UrlOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Url create method, without relations"""
    id: int
    created: datetime.datetime
    clicks: int


class UrlCreateWithoutRelationsInput(UrlOptionalCreateWithoutRelationsInput):
    """Required arguments to the Url create method, without relations"""
    original: str


class UrlCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UrlCreateWithoutRelationsInput'
    connect: 'UrlWhereUniqueInput'


class UrlCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UrlCreateWithoutRelationsInput', List['UrlCreateWithoutRelationsInput']]
    connect: Union['UrlWhereUniqueInput', List['UrlWhereUniqueInput']]


class UrlWhereUniqueInput(TypedDict, total=False):
    """Unique Url arguments for searching"""
    id: int


class UrlUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    created: datetime.datetime
    original: str
    clicks: Union[AtomicIntInput, int]


class UrlUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, int]
    created: datetime.datetime
    original: str
    clicks: Union[AtomicIntInput, int]


class UrlUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UrlCreateWithoutRelationsInput']
    connect: List['UrlWhereUniqueInput']
    set: List['UrlWhereUniqueInput']
    disconnect: List['UrlWhereUniqueInput']
    delete: List['UrlWhereUniqueInput']

    # TODO
    # update: List['UrlUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UrlUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UrlScalarWhereInput']
    # upsert: List['UrlUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UrlCreateOrConnectWithoutRelationsInput']


class UrlUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UrlCreateWithoutRelationsInput'
    connect: 'UrlWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UrlUpdateInput'
    # upsert: 'UrlUpsertWithoutRelationsInput'
    # connectOrCreate: 'UrlCreateOrConnectWithoutRelationsInput'


class UrlUpsertInput(TypedDict):
    create: 'UrlCreateInput'
    update: 'UrlUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class UrlOrderByInput(TypedDict, total=False):
    id: 'SortOrder'
    created: 'SortOrder'
    original: 'SortOrder'
    clicks: 'SortOrder'


# recursive Url types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/latest/limitations/

UrlRelationFilter = TypedDict(
    'UrlRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UrlListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UrlInclude(TypedDict, total=False):
    """Url relational arguments"""


    

class UrlIncludeFromUrl(TypedDict, total=False):
    """Relational arguments for Url"""


class UrlIncludeFromUrlRecursive1(TypedDict, total=False):
    """Relational arguments for Url"""


class UrlIncludeFromUrlRecursive2(TypedDict, total=False):
    """Relational arguments for Url"""


class UrlIncludeFromUrlRecursive3(TypedDict, total=False):
    """Relational arguments for Url"""


class UrlIncludeFromUrlRecursive4(TypedDict, total=False):
    """Relational arguments for Url"""

    

class UrlArgsFromUrl(TypedDict, total=False):
    """Arguments for Url"""
    include: 'UrlIncludeFromUrlRecursive1'


class UrlArgsFromUrlRecursive1(TypedDict, total=False):
    """Arguments for Url"""
    include: 'UrlIncludeFromUrlRecursive2'


class UrlArgsFromUrlRecursive2(TypedDict, total=False):
    """Arguments for Url"""
    include: 'UrlIncludeFromUrlRecursive3'


class UrlArgsFromUrlRecursive3(TypedDict, total=False):
    """Arguments for Url"""
    include: 'UrlIncludeFromUrlRecursive4'


class UrlArgsFromUrlRecursive4(TypedDict, total=False):
    """Arguments for Url"""
    
    

class FindManyUrlArgsFromUrl(TypedDict, total=False):
    """Arguments for Url"""
    take: int
    skip: int
    order_by: Union['UrlOrderByInput', List['UrlOrderByInput']]
    where: 'UrlWhereInput'
    cursor: 'UrlWhereUniqueInput'
    include: 'UrlIncludeFromUrlRecursive1'


class FindManyUrlArgsFromUrlRecursive1(TypedDict, total=False):
    """Arguments for Url"""
    take: int
    skip: int
    order_by: Union['UrlOrderByInput', List['UrlOrderByInput']]
    where: 'UrlWhereInput'
    cursor: 'UrlWhereUniqueInput'
    include: 'UrlIncludeFromUrlRecursive2'


class FindManyUrlArgsFromUrlRecursive2(TypedDict, total=False):
    """Arguments for Url"""
    take: int
    skip: int
    order_by: Union['UrlOrderByInput', List['UrlOrderByInput']]
    where: 'UrlWhereInput'
    cursor: 'UrlWhereUniqueInput'
    include: 'UrlIncludeFromUrlRecursive3'


class FindManyUrlArgsFromUrlRecursive3(TypedDict, total=False):
    """Arguments for Url"""
    take: int
    skip: int
    order_by: Union['UrlOrderByInput', List['UrlOrderByInput']]
    where: 'UrlWhereInput'
    cursor: 'UrlWhereUniqueInput'
    include: 'UrlIncludeFromUrlRecursive4'


class FindManyUrlArgsFromUrlRecursive4(TypedDict, total=False):
    """Arguments for Url"""
    take: int
    skip: int
    order_by: Union['UrlOrderByInput', List['UrlOrderByInput']]
    where: 'UrlWhereInput'
    cursor: 'UrlWhereUniqueInput'
    


FindManyUrlArgs = FindManyUrlArgsFromUrl
FindFirstUrlArgs = FindManyUrlArgsFromUrl


    

class UrlWhereInput(TypedDict, total=False):
    """Url arguments for searching"""
    id: Union[int, 'types.IntFilter']
    created: Union[datetime.datetime, 'types.DateTimeFilter']
    original: Union[str, 'types.StringFilter']
    clicks: Union[int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['UrlWhereInputRecursive1', List['UrlWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UrlWhereInputRecursive1']
    OR: List['UrlWhereInputRecursive1']
    NOT: List['UrlWhereInputRecursive1']


class UrlWhereInputRecursive1(TypedDict, total=False):
    """Url arguments for searching"""
    id: Union[int, 'types.IntFilter']
    created: Union[datetime.datetime, 'types.DateTimeFilter']
    original: Union[str, 'types.StringFilter']
    clicks: Union[int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['UrlWhereInputRecursive2', List['UrlWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UrlWhereInputRecursive2']
    OR: List['UrlWhereInputRecursive2']
    NOT: List['UrlWhereInputRecursive2']


class UrlWhereInputRecursive2(TypedDict, total=False):
    """Url arguments for searching"""
    id: Union[int, 'types.IntFilter']
    created: Union[datetime.datetime, 'types.DateTimeFilter']
    original: Union[str, 'types.StringFilter']
    clicks: Union[int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['UrlWhereInputRecursive3', List['UrlWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UrlWhereInputRecursive3']
    OR: List['UrlWhereInputRecursive3']
    NOT: List['UrlWhereInputRecursive3']


class UrlWhereInputRecursive3(TypedDict, total=False):
    """Url arguments for searching"""
    id: Union[int, 'types.IntFilter']
    created: Union[datetime.datetime, 'types.DateTimeFilter']
    original: Union[str, 'types.StringFilter']
    clicks: Union[int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['UrlWhereInputRecursive4', List['UrlWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UrlWhereInputRecursive4']
    OR: List['UrlWhereInputRecursive4']
    NOT: List['UrlWhereInputRecursive4']


class UrlWhereInputRecursive4(TypedDict, total=False):
    """Url arguments for searching"""
    id: Union[int, 'types.IntFilter']
    created: Union[datetime.datetime, 'types.DateTimeFilter']
    original: Union[str, 'types.StringFilter']
    clicks: Union[int, 'types.IntFilter']



UrlKeys = Literal[
    'id',
    'created',
    'original',
    'clicks',
]

UrlRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields