# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pylint: disable=all
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
import sys
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Callable,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)

if sys.version_info >= (3, 9):
    from typing import TypedDict, Literal
else:
    from typing_extensions import TypedDict, Literal

# -- template client.py.jinja --
from types import TracebackType
from collections import defaultdict
from pydantic import BaseModel, validate_arguments

from . import types, models, errors, actions
from ._types import BaseModelT
from .engine import QueryEngine
from .builder import QueryBuilder


__all__ = (
    'Client',
    'load_env',
    'register',
    'get_client',
)

SCHEMA = '''
datasource db {
  provider = "sqlite"
  url      = "file:database.db"
}

generator db {
  provider  = "prisma-client-py"
  interface = "sync"
}

model Url {
  id       Int      @id @default(autoincrement())
  created  DateTime @default(now())
  original String
  clicks   Int      @default(0)
}

'''

RegisteredClient = Union['Client', Callable[[], 'Client']]
_REGISTERED_CLIENT: Optional[RegisteredClient] = None


def load_env(*, override: bool = True, **kwargs: Any) -> None:
    """Load environemntal variables from dotenv files

    Loads from the following files relative to the current
    working directory:

    - .env
    - prisma/.env
    """
    from dotenv import load_dotenv

    load_dotenv('.env', override=override, **kwargs)
    load_dotenv('prisma/.env', override=override, **kwargs)


def register(client: RegisteredClient) -> None:
    """Register a client instance to be retrieved by `get_client()`

    This function _must_ only be called once, preferrably as soon as possible
    to avoid any confusing errors with coroutines or threads.
    """
    global _REGISTERED_CLIENT

    if _REGISTERED_CLIENT is not None:
        raise errors.ClientAlreadyRegisteredError('A client has already been registered.')

    if not isinstance(client, Client) and not callable(client):
        raise TypeError('TODO')

    _REGISTERED_CLIENT = client  # pyright: reportConstantRedefinition=false


def get_client() -> 'Client':
    """Get the registered client instance"""
    registered = _REGISTERED_CLIENT
    if registered is None:
        raise errors.ClientNotRegisteredError() from None

    if isinstance(registered, Client):
        return registered

    client = registered()
    if not isinstance(client, Client):  # pyright: reportUnnecessaryIsInstance=false
        raise TypeError(
            f'Registered function returned {client} instead of a {Client} instance.'
        )

    return client


class Client:
    url: 'actions.UrlActions[models.Url]'

    def __init__(
        self,
        *,
        use_dotenv: bool = True,
        log_queries: bool = False,
        # no idea why this type ignore is required, pyright works correctly, mypy does not
        datasource: Optional[types.DatasourceOverride] = None,  # type: ignore[name-defined]
    ) -> None:
        self.url = actions.UrlActions[models.Url](self, models.Url)
        self.__engine: Optional[QueryEngine] = None
        self._active_provider = 'sqlite'
        self._log_queries = log_queries
        self._datasource = datasource

        if use_dotenv:
            load_env()

    def __del__(self) -> None:
        if self.__engine is not None:
            self.__engine.stop()
            self.__engine = None

    def is_connected(self) -> bool:
        """Returns True if the client is connected to the query engine, False otherwise."""
        return self.__engine is not None

    def connect(self, timeout: int = 10) -> None:
        """Connect to the Prisma query engine.

        It is required to call this before accessing data.
        """
        if self.__engine is None:
            self.__engine = QueryEngine(dml=SCHEMA, log_queries=self._log_queries)

        datasources: Optional[List[types.DatasourceOverride]] = None
        if self._datasource is not None:
            ds = self._datasource.copy()
            ds.setdefault('name', 'db')
            datasources = [ds]

        self.__engine.connect(
            timeout=timeout,
            datasources=datasources,
        )

    def disconnect(self) -> None:
        """Disconnect the Prisma query engine."""
        if self.__engine is not None:
            self.__engine.disconnect()
            self.__engine.close_session()
            self.__engine = None

    def execute_raw(self, query: str, *args: Any) -> int:
        resp = self._execute(
            operation='mutation',
            method='executeRaw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )
        return int(resp['data']['result'])

    @overload
    def query_first(self, query: str, *args: Any) -> Any:
        ...

    @overload
    def query_first(self, query: str, *args: Any, model: Type[BaseModelT]) -> Optional[BaseModelT]:
        ...

    def query_first(
        self, query: str, *args: Any, model: Optional[Type[BaseModelT]] = None
    ) -> Union[Optional[BaseModelT], Any]:
        if model is not None:
            results = self.query_raw(query, *args, model=model)
        else:
            results = self.query_raw(query, *args)

        if not results:
            return None

        return results[0]

    @overload
    def query_raw(self, query: str, *args: Any) -> Any:
        ...

    @overload
    def query_raw(self, query: str, *args: Any, model: Type[BaseModelT]) -> List[BaseModelT]:
        ...

    def query_raw(
        self, query: str, *args: Any, model: Optional[Type[BaseModelT]] = None
    ) -> Union[List[BaseModelT], Any]:
        resp = self._execute(
            operation='mutation',
            method='queryRaw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )
        result = resp['data']['result']
        if model is not None:
            return [model.parse_obj(r) for r in result]
        return result

    def batch_(self) -> 'Batch':
        """Returns a context manager for grouping write queries into a single transaction."""
        return Batch(client=self)

    # TODO: don't return Any
    def _execute(
        self,
        method: str,
        operation: str,
        arguments: Dict[str, Any],
        model: Optional[str] = None,
        root_selection: Optional[List[str]] = None
    ) -> Any:
        builder = QueryBuilder(
            operation=operation,
            method=method,
            model=model,
            arguments=arguments,
            root_selection=root_selection,
        )
        return self._engine.request('POST', '/', content=builder.build())

    @property
    def _engine(self) -> QueryEngine:
        engine = self.__engine
        if engine is None:
            raise errors.ClientNotConnectedError()
        return engine


# TODO: this should return the results as well
# TODO: don't require copy-pasting arguments between actions and batch actions
class Batch:
    url: 'UrlBatchActions'

    def __init__(self, client: Client) -> None:
        self.__client = client
        self.__queries: List[str] = []
        self._active_provider = client._active_provider
        self.url = UrlBatchActions(self)

    def _add(self, **kwargs: Any) -> None:
        builder = QueryBuilder(**kwargs)
        self.__queries.append(builder.build_query())

    def commit(self) -> None:
        """Execute the queries"""
        # TODO: normalise this, we should still call client._execute
        from .builder import dumps

        queries = self.__queries
        self.__queries = []

        payload = {
            'batch': [
                {
                    'query': query,
                    'variables': {},
                }
                for query in queries
            ],
            'transaction': True,
        }
        self.__client._engine.request('POST', '/', content=dumps(payload))

    def __enter__(self) -> 'Batch':
        return self

    def __exit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        if exc is None:
            self.commit()


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class UrlBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.UrlCreateInput,
        include: Optional[types.UrlInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='Url',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.UrlCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='Url',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.UrlWhereUniqueInput,
        include: Optional[types.UrlInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='Url',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.UrlUpdateInput,
        where: types.UrlWhereUniqueInput,
        include: Optional[types.UrlInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='Url',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.UrlWhereUniqueInput,
        data: types.UrlUpsertInput,
        include: Optional[types.UrlInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='Url',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.UrlUpdateManyMutationInput,
        where: types.UrlWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='Url',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.UrlWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='Url',
            arguments={'where': where},
            root_selection=['count'],
        )


