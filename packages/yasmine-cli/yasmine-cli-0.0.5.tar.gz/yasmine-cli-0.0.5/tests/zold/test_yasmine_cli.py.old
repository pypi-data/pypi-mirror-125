#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
test_yasmine_cli
----------------------------------

Tests for `yasmine_cli` module.
"""

import glob
import os
import sys
import unittest

from obspy.core.inventory.network import Network
from obspy.core.inventory.station import Station
from obspy.core.inventory.channel import Channel

import yasmine_cli

from yasmine_cli import installation_dir, fdsn_schema_dir, yml_template_dir
from yasmine_cli.libs.libs_xml import validate_stationxml, get_schema_version
from yasmine_cli.libs.edit_xml_to_inv import load_xmlfiles, pack_xml_list_to_inv
from yasmine_cli.libs.libs_obs import _write_stationxml, read_yml_file
from yasmine_cli.libs.libs_util import configure, processCmdLine
from yasmine_cli.libs.libs_log import configure_logger
from yasmine_cli.libs.edit_xml_to_inv import update_root_field, update_field, edit_xml_to_inv

import logging
logger = logging.getLogger()
logger.setLevel(logging.ERROR)

TEMPLATE_DIR = yml_template_dir()

class TestYasmine_cli(unittest.TestCase):

    def setUp(self):

        self.install_dir = installation_dir()
        self.assertEqual(os.path.isdir(self.install_dir), 1)
        self.schema_dir  = fdsn_schema_dir()
        self.assertEqual(os.path.isdir(self.schema_dir), 1)

    def test_version(self):
        assert(yasmine_cli.__version__)

    def test_read_config(self):
        config = configure('./config.yml')
        self.assertEqual(config['LOG_LEVEL'], 'DEBUG')

    def test_process_command_line(self):
        #sys.argv = ['/Users/mth/mth/miniconda3/envs/yas/bin/yasmine-cli',
        sys.argv = ['yasmine-cli',
                    '--field=code', '--value=MIKE',
                    '--level_station=*.ANMO', '--epoch_station=1', '--epoch_channel=3',
                    '--schema_version', '1.1',
                    '-o', 'a.xml']
        args, scnl_filter = processCmdLine('yasmine-cli')
        self.assertEqual(args.level, 'station')
        self.assertEqual(args.field, 'code')
        self.assertEqual(args.value, 'MIKE')
        self.assertEqual(scnl_filter.STA, 'ANMO')
        self.assertEqual(scnl_filter.STN_EPOCH, 1)
        self.assertEqual(scnl_filter.CHN_EPOCH, 3)
        pass

    def test_read_xml_version(self):
        xmlfile = 'test_data/Test.xml'
        schema_version = get_schema_version(xmlfile)
        self.assertEqual(schema_version, '1.0')
        schema_file = os.path.join(self.schema_dir, 'fdsn-station-%s.xsd' % schema_version)
        assert(os.path.isfile(schema_file))
        valid, errors = validate_stationxml(xmlfile, schema_file)
        self.assertTrue(valid)

    def test_load_xml_file(self):
        xmlfile = 'test_data/Test.xml'
        xml_list = load_xmlfiles([xmlfile])
        self.assertIsInstance(xml_list, list)

    def test_convert_xml_list_to_inv(self):
        xmlfile = 'test_data/Test.xml'
        outfile = 'b.xml'
        xml_list = load_xmlfiles([xmlfile])
        inv = pack_xml_list_to_inv(xml_list)
        schema_version = get_schema_version(xmlfile)
        self.assertIsNotNone(inv)
        _write_stationxml(inv, outfile, validate=True, schema_version=schema_version)
        assert(os.path.isfile(outfile))

    '''
+   3 yasmine-cli --infiles=../tests/test_data/station.xml --action=add --from_yml=yml:yml/station.yml --level_network=* \
+   4   -o 5.xml
+   5 yasmine-cli --infiles=5.xml --field=operators --value=yml:yml/operators.yml --level_station=*.MIKE --schema_version=1.1>
+   6   -o 6.xml
+   7 exit 1
    '''

    def test_read_base_nodes(self):
        for basenode in [Network, Station, Channel]:
            node = test_read_base_node(basenode.__name__)
            self.assertIsInstance(node, basenode)

    def test_add1(self):
        sys.argv = ['yasmine-cli', '--infiles=test_data/NE.xml', '-o', '1.xml',
                    '--action=add', '--from_yml=yml:yml/station.yml',
                    '--level_network=NE',
                    '--schema_version=1.1',
                    ]
        args, scnl_filter = processCmdLine('yasmine-cli')
        inv, schema_version = edit_xml_to_inv(args, scnl_filter)
        _write_stationxml(inv, args.output, validate=True, schema_version=schema_version)
        #_write_stationxml(inv, args.output, validate=False, schema_version=schema_version)

    def test_add2(self):
        sys.argv = ['yasmine-cli', '--infiles=1.xml', '-o', '2.xml',
                    '--action=add', '--from_yml=yml:yml/channel.yml',
                    '--level_station=*.MIKE',
                    ]
        args, scnl_filter = processCmdLine('yasmine-cli')
        inv, schema_version = edit_xml_to_inv(args, scnl_filter)
        print(inv)
        f = inv.select(station='MIKE', channel='HN1')
        print()
        print(f)
        for network in f.networks:
            for station in network.stations:
                for channel in station.channels:
                    print(channel.code, channel.start_date, type(channel.start_date))

        f = inv.select(station='WES', channel='HHZ')
        for network in f.networks:
            for station in network.stations:
                for channel in station.channels:
                    print(channel.code, channel.start_date, type(channel.start_date))


        print("schema_version=%s" % schema_version)
        _write_stationxml(inv, args.output, validate=True, schema_version=schema_version)
        #_write_stationxml(inv, args.output, validate=False, schema_version=schema_version)

    '''
    def test_update1(self):
        sys.argv = ['yasmine-cli', '--infiles=2.xml', '-o', '3.xml',
                    '--action=update',
                    '--level_station=NE.MIKE',
                    '--field=operators', '--value=yml:yml/operators.yml',
                    ]
        args, scnl_filter = processCmdLine('yasmine-cli')
        inv, schema_version = edit_xml_to_inv(args, scnl_filter)
        _write_stationxml(inv, args.output, validate=True, schema_version=schema_version)

    def test_delete_channel(self):
        sys.argv = ['yasmine-cli', '--infiles=3.xml', '-o', '4.xml',
                    '--action=delete',
                    '--level_station=NE.MIKE',
                    ]
        args, scnl_filter = processCmdLine('yasmine-cli')
        inv, schema_version = edit_xml_to_inv(args, scnl_filter)
        _write_stationxml(inv, args.output, validate=True, schema_version=schema_version)
    '''



    def test_delete_base_node(self):
        #pass
        self.assertIs(1,1)
    def test_add_base_node(self):
        pass
    def test_update_field(self):
        pass

    def tearDown(self):
        files = glob.glob('?.xml')
        #for f in files:
            #os.remove(f)

def test_read_base_node(basenode):
        yml_path = 'yml:yml/%s.yml' % basenode.lower()
        file_1 = os.path.join(os.getcwd(), yml_path[4:])
        # Else look for file in TEMPLATE_DIR
        file_2 = os.path.join(TEMPLATE_DIR, os.path.basename(yml_path[4:]))

        if os.path.exists(file_1):
            ymlfile = file_1
        elif os.path.exists(file_2):
            ymlfile = file_2
        else:
            print("Unable to find yml_file=[%s] file in either: cwd=%s -or: TEMPLATE_DIR=%s" %
                  (yml_path[4:], os.getcwd(), TEMPLATE_DIR))

        return read_yml_file(ymlfile)


if __name__ == "__main__":
    unittest.main()
