# Generated by Django 3.2 on 2021-10-25 13:11

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, max_length=10, null=True, unique=True)),
                ('name', models.CharField(help_text='The name of the badge.', max_length=50)),
                ('slug', models.SlugField(blank=True, editable=False, max_length=80, null=True, unique=True)),
                ('desc', models.CharField(default='', help_text='The description of the badge.', max_length=200)),
                ('level', models.IntegerField(choices=[(1, 'bronze'), (2, 'silver'), (3, 'gold')], default=1, help_text='The rarity level of the badge.')),
                ('category', models.IntegerField(choices=[(None, '(unknown)'), (0, 'misc'), (1, 'post'), (2, 'tutorial'), (3, 'question'), (4, 'answer'), (5, 'comment'), (6, 'reaction')], default=0, help_text='Badge category.')),
                ('state', models.IntegerField(choices=[(0, 'retired'), (1, 'active')], default=1, help_text='Badge status.')),
                ('icon', models.CharField(default='', help_text='The icon to display for the badge.', max_length=250)),
                ('date', models.DateTimeField(default=django.utils.timezone.now, help_text='First created')),
            ],
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, db_index=True, editable=False, max_length=10, null=True, unique=True)),
                ('slug', models.SlugField(blank=True, editable=False, max_length=80, null=True, unique=True)),
                ('title', models.CharField(max_length=240)),
                ('content', models.TextField(blank=True, help_text='Page content.', null=True, verbose_name='content')),
                ('seo_title', models.CharField(max_length=240)),
                ('seo_description', models.TextField(blank=True, null=True)),
                ('data', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, editable=False)),
                ('last_edited_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, editable=False)),
                ('is_live', models.BooleanField(default=True)),
                ('login_required', models.BooleanField(default=False, help_text='If this is checked, only logged-in users will be able to view the page.', verbose_name='login required')),
                ('template_name', models.CharField(blank=True, help_text='Example: “pages/contact_page.html”. If this isn’t provided, the system will use “pages/default.html”.', max_length=70, null=True, verbose_name='template name')),
                ('real_model', models.CharField(editable=False, max_length=120)),
                ('vote_count', models.IntegerField(default=0)),
                ('view_count', models.IntegerField(default=0)),
                ('bookmark_count', models.IntegerField(default=0)),
                ('subscriber_count', models.IntegerField(default=0)),
                ('duplicate_count', models.IntegerField(default=0)),
                ('spam_count', models.IntegerField(default=0)),
                ('clap_count', models.IntegerField(default=0)),
                ('allow_comments', models.BooleanField(default=True, verbose_name='allow comments')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pages', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('edited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_edited_posts', to=settings.AUTH_USER_MODEL, verbose_name='edited by')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='Page, can have a hierarchy. You might have a Index, and under that have children page for Blog and Comment. Totally optional.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='slunic.page')),
            ],
            options={
                'verbose_name': 'page',
                'verbose_name_plural': 'pages',
                'index_together': {('parent', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='slug')),
                ('name', models.SlugField()),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'tag',
                'verbose_name_plural': 'tags',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='slunic.page')),
                ('accepted', models.BooleanField(null=True)),
            ],
            options={
                'verbose_name': 'answer',
                'verbose_name_plural': 'answers',
            },
            bases=('slunic.page',),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='slunic.page')),
            ],
            options={
                'verbose_name': 'comment',
                'verbose_name_plural': 'comments',
            },
            bases=('slunic.page',),
        ),
        migrations.CreateModel(
            name='Visitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.GenericIPAddressField(blank=True, default='', null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visitors', to='slunic.page')),
            ],
        ),
        migrations.CreateModel(
            name='TaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='object ID')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slunic_taggeditem_tagged_items', to='contenttypes.contenttype', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slunic_taggeditem_items', to='slunic.tag')),
            ],
            options={
                'verbose_name': 'tagged item',
                'verbose_name_plural': 'tagged items',
                'unique_together': {('content_type', 'object_id', 'tag')},
                'index_together': {('content_type', 'object_id')},
            },
        ),
        migrations.CreateModel(
            name='Reaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, db_index=True, editable=False, max_length=10, null=True, unique=True)),
                ('type', models.IntegerField(blank=True, choices=[(None, '(unknown)'), (0, 'up vote'), (1, 'down vote'), (2, 'clap'), (3, 'bookmark'), (4, 'accept'), (5, 'spam'), (6, 'duplicate'), (7, 'subscribe')], db_index=True, default='(unknown)', null=True)),
                ('date', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='slunic.page')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Diff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diff', models.TextField(default='', help_text='Initial content state')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Date this change was made')),
                ('author', models.ForeignKey(help_text='Person who created the diff', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('page', models.ForeignKey(help_text='Post this diff belongs to', on_delete=django.db.models.deletion.CASCADE, to='slunic.page')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, db_index=True, max_length=10, null=True, unique=True)),
                ('name', models.CharField(max_length=80, unique=True, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='Category Name')),
                ('slug', models.SlugField(blank=True, editable=False, max_length=80, null=True, unique=True)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='Categories, unlike tags, category can have a hierarchy. You might have a Jazz category, and under that have children categories for Bebop and Big Band. Totally optional.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='slunic.category')),
            ],
            options={
                'verbose_name': 'category',
                'verbose_name_plural': 'categories',
                'unique_together': {('parent', 'slug')},
                'index_together': {('parent', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, max_length=10, null=True, unique=True)),
                ('date', models.DateTimeField(default=django.utils.timezone.now, help_text='Earned date')),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='slunic.badge')),
                ('page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='awards', to='slunic.page')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(editable=False, max_length=10, unique=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatar', verbose_name='avatar')),
                ('bio', models.TextField(blank=True, default='No profile information', help_text='description provided by the user.', max_length=245, null=True)),
                ('city', models.CharField(blank=True, db_index=True, default='', max_length=50, null=True, verbose_name='city')),
                ('region', models.CharField(blank=True, db_index=True, default='', max_length=50, null=True, verbose_name='region')),
                ('location', models.CharField(blank=True, db_index=True, default='', help_text='User provided location.', max_length=255, null=True)),
                ('message', models.IntegerField(choices=[(1, 'local messages'), (2, 'email'), (3, 'no messages'), (4, 'default')], default=4, help_text='Messaging profile')),
                ('my_tags', models.CharField(blank=True, default='', help_text='This field is used to select content for the user.', max_length=200)),
                ('watched_tags', models.CharField(blank=True, default='', help_text="The tag value is the canonical form of the post's tags", max_length=200)),
                ('new_messages', models.IntegerField(db_index=True, default=0, help_text='The number of new messages for the user.')),
                ('score', models.IntegerField(db_index=True, default=0, editable=False, help_text='User reputation score.')),
                ('subscriber_count', models.IntegerField(default=0, editable=False)),
                ('state', models.IntegerField(choices=[(1, 'new'), (2, 'trusted'), (3, 'suspended'), (4, 'banned'), (5, 'spammer')], db_index=True, default=1)),
                ('last_login', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='The date the user last logged in.', max_length=255, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
                ('watched', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='slunic.TaggedItem', to='slunic.Tag', verbose_name='Tags')),
            ],
            options={
                'swappable': 'SLUNIC_PROFILE_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Tutorial',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='slunic.page')),
                ('summary', models.TextField(blank=True, db_index=True, max_length=250, null=True, verbose_name='summary')),
                ('category', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tutorials', to='slunic.category', verbose_name='category')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='slunic.TaggedItem', to='slunic.Tag', verbose_name='tags')),
            ],
            options={
                'verbose_name': 'tutorial',
                'verbose_name_plural': 'tutorials',
            },
            bases=('slunic.page',),
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'local messages'), (2, 'email message'), (3, 'not subscribed')], default=1, null=True)),
                ('date', models.DateTimeField()),
                ('subs', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='follows', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subscribers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'subs')},
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='slunic.page')),
                ('state', models.IntegerField(choices=[(1, 'open'), (2, 'off topic'), (3, 'duplicate'), (4, 'solved'), (5, 'closed')], db_index=True, default=1)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='slunic.TaggedItem', to='slunic.Tag', verbose_name='tags')),
            ],
            options={
                'verbose_name': 'question',
                'verbose_name_plural': 'questions',
            },
            bases=('slunic.page',),
        ),
        migrations.CreateModel(
            name='Help',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='slunic.page')),
                ('summary', models.TextField(blank=True, db_index=True, max_length=250, null=True, verbose_name='summary')),
                ('category', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='help_pages', to='slunic.category', verbose_name='category')),
            ],
            options={
                'verbose_name': 'help',
                'verbose_name_plural': 'helps',
            },
            bases=('slunic.page',),
        ),
    ]
